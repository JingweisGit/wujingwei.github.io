<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一次因过滤器未正常使用ByteArrayInputStream导致的请求异常</title>
    <url>/2021/08/16/%E4%B8%80%E6%AC%A1%E5%9B%A0%E8%BF%87%E6%BB%A4%E5%99%A8%E6%9C%AA%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8ByteArrayInputStream%E5%AF%BC%E8%87%B4%E7%9A%84%E8%AF%B7%E6%B1%82%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h3 id="一次因过滤器未正常使用ByteArrayInputStream导致的请求异常"><a href="#一次因过滤器未正常使用ByteArrayInputStream导致的请求异常" class="headerlink" title="一次因过滤器未正常使用ByteArrayInputStream导致的请求异常"></a>一次因过滤器未正常使用ByteArrayInputStream导致的请求异常</h3><p>表状为：开发环境一切正常，测试环境中，当只有一个中文字符的时候就会报如下异常：</p>
<p><code>Invalid UTF-8 middle byte 0x3f\n at [Source: (PushbackInputStream); line: 20, column: 11]</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(body.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    ServletInputStream servletInputStream = <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> byteArrayInputStream.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> servletInputStream;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于框架中使用了上述过滤器，但是为给定UTF-8字符集，导致开发环境不报错，测试环境报了上述错误。</p>
<ul>
<li>上述问题导致的另一个问题<blockquote>
<p>中文返回乱码</p>
</blockquote>
</li>
</ul>
<p>解决方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.http.encoding.force=true</span><br><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line">spring.http.encoding.enabled=true</span><br><span class="line">server.tomcat.uri-encoding=UTF-8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web应用</category>
      </categories>
      <tags>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>基于dockers安装sentry</title>
    <url>/2021/08/16/%E5%AE%B9%E5%99%A8-%E5%9F%BA%E4%BA%8Edockers%E5%AE%89%E8%A3%85sentry/</url>
    <content><![CDATA[<h2 id="docker下安装sentry"><a href="#docker下安装sentry" class="headerlink" title="docker下安装sentry"></a>docker下安装sentry</h2><h3 id="1-拉取-sentry镜像"><a href="#1-拉取-sentry镜像" class="headerlink" title="1. 拉取 sentry镜像"></a>1. 拉取 sentry镜像</h3><p>  <code>docker pull sentry</code></p>
<p>  <code>docker pull postgres</code></p>
<p>  <code>docker pull redis</code></p>
<h3 id="2-运行容器"><a href="#2-运行容器" class="headerlink" title="2. 运行容器"></a>2. 运行容器</h3><h4 id="2-1-生成secret-key"><a href="#2-1-生成secret-key" class="headerlink" title="2.1. 生成secret-key"></a>2.1. 生成secret-key</h4><p>  <code>docker run --rm sentry config generate-secret-key</code></p>
<blockquote>
<p>将生成的secret-key保留，用在下一步中</p>
</blockquote>
<h4 id="2-2-运行容器"><a href="#2-2-运行容器" class="headerlink" title="2.2. 运行容器"></a>2.2. 运行容器</h4><p><code>docker run -d --name sentry-redis redis</code></p>
<p><code>docker run -d --name sentry-postgres -e POSTGRES_PASSWORD=admin -e POSTGRES_USER=admin postgres</code></p>
<p><code>docker run -it --rm -e SENTRY_SECRET_KEY=&quot;k&amp;61n_&amp;w++53+f18sgt!u!j+b-l^6m02oo#qq%k--+128o+1cr&quot; --link sentry-postgres:postgres --link sentry-redis:redis sentry upgrade</code></p>
<blockquote>
<p>note: -p proxy_port:origin_port 需要将原始端口映射到外部，否则访问不到</p>
</blockquote>
<p><code>docker run -d -p 9000:9000 --name my-sentry -e SENTRY_SECRET_KEY=&quot;k&amp;61n_&amp;w++53+f18sgt!u!j+b-l^6m02oo#qq%k--+128o+1cr&quot; --link sentry-redis:redis --link sentry-postgres:postgres sentry</code></p>
<p><code>docker run -d --name sentry-cron -e SENTRY_SECRET_KEY=&quot;k&amp;61n_&amp;w++53+f18sgt!u!j+b-l^6m02oo#qq%k--+128o+1cr&quot; --link sentry-postgres:postgres --link sentry-redis:redis sentry run cron</code></p>
<p><code>docker run -d --name sentry-worker-1 -e SENTRY_SECRET_KEY=&quot;k&amp;61n_&amp;w++53+f18sgt!u!j+b-l^6m02oo#qq%k--+128o+1cr&quot; --link sentry-postgres:postgres --link sentry-redis:redis sentry run worker</code></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>容器技术</tag>
      </tags>
  </entry>
  <entry>
    <title>中断异常的正确处理方式</title>
    <url>/2021/08/16/%E4%B8%AD%E6%96%AD%E5%BC%82%E5%B8%B8%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="InterruptedException"><a href="#InterruptedException" class="headerlink" title="InterruptedException"></a>InterruptedException</h2><blockquote>
<p>线程状态</p>
</blockquote>
<ul>
<li><p>新建 -&gt; 就绪 -&gt; 运行 -&gt; 阻塞 -&gt; 死亡</p>
<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.jpg" alt="线程中断"></p>
<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4></li>
<li><p>1、线程中断介绍</p>
<p>​    Java中的中断实际上并不是真正的中断了一个线程，而是维护了一个中断的标识。</p>
<p>​    每一个线程都有一个boolean类型的标志，此标志意思是当前的请求是否请求中断，默认为false。当一个线程A调用了线程B的interrupt方法时，那么线程B的是否请求的中断标志变为true。而线程B可以调用方法检测到此标志的变化。</p>
<p>2、中断异常介绍</p>
<p>​    中断异常只是为了标识某个行为被中断，实际上并不中断当前线程。</p>
<ul>
<li>源码中关于中断的解释（翻译不一定完全到位，理解即可）</li>
</ul>
<p>Thrown when a thread is waiting, sleeping, or otherwise occupied, and the thread is interrupted, either before or during the activity. Occasionally a method may wish to test whether the current thread has been interrupted, and if so, to immediately throw this exception.</p>
<p>当线程正在等待、休眠或以其他方式被占用时抛出，线程在活动状态之前或者活动期间被中断。有时候，一个方法也许希望检测当前线程是否被中断，因此，要立即抛出此异常。</p>
</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul>
<li>不正确示例<blockquote>
<p>示例</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   res = lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException ex)&#123;</span><br><span class="line">   log.error(ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述方式只是记录了日志，没有对中断进行处理，对于上一级调用程序，当前线程的中断状态无法被感知。</p>
<h4 id="正确的处理方式"><a href="#正确的处理方式" class="headerlink" title="正确的处理方式"></a>正确的处理方式</h4><ul>
<li>重新抛出异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   res = lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException ex)&#123;</span><br><span class="line">   log.error(ex.getMessage());</span><br><span class="line">   <span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过线程<code> Thread.currentThread().interrupt();</code>方法将状态重新置为true</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 维护一个可用标识，通过标识来判断是否重置中断状态</span></span><br><span class="line"><span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    res = lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;<span class="keyword">catch</span> (InterruptedException ex)&#123;</span><br><span class="line">    log.error(ex.getMessage());</span><br><span class="line">    interrupted = <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(interrupted) &#123;</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA基础</category>
      </categories>
      <tags>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>基于docker发布Springboot项目</title>
    <url>/2021/08/13/%E5%AE%B9%E5%99%A8-%E5%9F%BA%E4%BA%8Edocker%E5%8F%91%E5%B8%83Springboot%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h4 id="基于docker发布springboot项目到远程服务器"><a href="#基于docker发布springboot项目到远程服务器" class="headerlink" title="基于docker发布springboot项目到远程服务器"></a>基于docker发布springboot项目到远程服务器</h4><blockquote>
<p>环境说明</p>
<p>服务器：CenOS 7</p>
<p>IDE：idea</p>
</blockquote>
<blockquote>
<p><strong>PART 1 服务器环境配置</strong></p>
</blockquote>
<ul>
<li><h4 id="1-docker镜像配置"><a href="#1-docker镜像配置" class="headerlink" title="1.  docker镜像配置"></a>1.  docker镜像配置</h4></li>
</ul>
<p>​        <strong>1.1. docker镜像源配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># docker镜像源配置</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://f1361db2.m.daocloud.io&quot;</span></span><br><span class="line">        ],</span><br><span class="line">    <span class="attr">&quot;live-restore&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        <strong>1.2. docker服务修改，使外网可访问</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将一下行注掉，修改为如下所示</span><br><span class="line">#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line">ExecStart=/usr/bin/dockerd  -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>PART 2 项目操作环境配置</strong></p>
</blockquote>
<ul>
<li><h5 id="1-pom中加入docker构建插件"><a href="#1-pom中加入docker构建插件" class="headerlink" title="1.  pom中加入docker构建插件"></a>1.  pom中加入docker构建插件</h5><p><strong>1.1.</strong> <strong>声明镜像名称前缀</strong></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>镜像名称<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​            <strong>1.2</strong>. <strong>build-&gt;plugins中加入docker构建plugin</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--docker镜像构建工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/target<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ul>
<li><strong>2. Dockerfile配置</strong></li>
</ul>
<p>步骤一：与src同级目录下，新建Dockerfile<br><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-dockerfile.jpg" alt="dockerfile"></p>
<p>步骤二：Dockerfile配置</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> target/项目名称.jar /项目名称.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/项目名称.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>3. idea添加docker配置</strong><br>步骤一：添加template</li>
</ul>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-idea-docker-tmp.jpg" alt="idea-docker-template"></p>
<p>步骤二：添加docker配置</p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-docker-add.jpg" alt="0611-docker-add"></p>
<p><em><u>配置介绍</u></em></p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-docker-add-conf.jpg" alt="0611-docker-add-conf"></p>
<p> 步骤三：在service栏中添加docker**<Docker Connection>**服务，配置docker环境远程连接</p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-docker-remote-conn.jpg" alt="0611-docker-remote-conn"></p>
<p style="color:red;">注：要连接远程环境，需要远程docker支持，详见part1中介绍</p>

<p>至此，IDE中环境配置结束</p>
<blockquote>
<p><strong>PART 3 开始构建</strong></p>
</blockquote>
<ul>
<li><p><strong>1. 按照maven常规方式打包项目</strong></p>
</li>
<li><p><strong>2. 点击idea按钮开始构建</strong></p>
</li>
</ul>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-start-build-btn.jpg" alt="0611-start-build-btn"></p>
<p><em><u>构建结果</u></em></p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-docker-build-res.jpg" alt="0611-docker-build-res"></p>
<ul>
<li><strong>3. 启动容器</strong></li>
</ul>
<p><strong>3.1. 创建容器</strong></p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-docker-create-cont.jpg" alt="0611-docker-create-cont"></p>
<ul>
<li><p><strong>3.2. 容器端口配置</strong></p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-docker-port-conf.jpg" alt="0611-docker-port-conf"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>容器技术</tag>
      </tags>
  </entry>
  <entry>
    <title>本站说明</title>
    <url>/2021/08/13/%E7%AB%99%E7%82%B9%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<p><strong>用于记录开发过程中遇到的一些技术问题，同时提供一些技术样例</strong></p>
]]></content>
      <categories>
        <category>本站说明</category>
      </categories>
  </entry>
  <entry>
    <title>docker安装elasticsearch及相关组件</title>
    <url>/2021/08/17/docker%E5%AE%89%E8%A3%85elasticsearch%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="docker安装elasticsearch及相关组件"><a href="#docker安装elasticsearch及相关组件" class="headerlink" title="docker安装elasticsearch及相关组件"></a>docker安装elasticsearch及相关组件</h3><blockquote>
<p><strong>安装环境说明：</strong><br>操作系统：CentOS 7</p>
<p>ES版本：7.7.0</p>
<p>其他组件：Kibana、Elasticsearch-header</p>
</blockquote>
<h4 id="1-镜像安装"><a href="#1-镜像安装" class="headerlink" title="1. 镜像安装"></a>1. 镜像安装</h4><blockquote>
<p>docker run 命令参数说明：<br> –name：表示镜像启动后的容器名称<br>-d： 后台运行容器，并返回容器ID；<br>-e:：指定容器内的环境变量<br>-p： 指定端口映射，格式为：宿主机端口:容器端口</p>
</blockquote>
<h5 id="1-1-elasticsearch安装"><a href="#1-1-elasticsearch安装" class="headerlink" title="1.1. elasticsearch安装"></a>1.1. elasticsearch安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.7.0</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name elasticsearch -d -e ES_JAVA_OPTS=&quot;-Xms512m -Xmx512m&quot; -e &quot;discovery.type=single-node&quot; -p 9200:9200 -p 9300:9300 elasticsearch:7.7.0</span><br></pre></td></tr></table></figure>
<h5 id="1-2-elasticsearch-header安装"><a href="#1-2-elasticsearch-header安装" class="headerlink" title="1.2. elasticsearch-header安装"></a>1.2. elasticsearch-header安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像</span></span><br><span class="line">docker pull mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建容器</span></span><br><span class="line">docker create --name elasticsearch-head -p 9100:9100 mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动容器</span></span><br><span class="line">docker start 容器id</span><br></pre></td></tr></table></figure>
<h5 id="1-3-kibana安装"><a href="#1-3-kibana安装" class="headerlink" title="1.3. kibana安装"></a>1.3. kibana安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装镜像</span></span><br><span class="line">docker pull kibana:7.7.1</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装镜像</span></span><br><span class="line">docker run --name [容器名称&lt;自定义&gt;] -e ELASTICSEARCH_URL=[ES访问地址&lt;9200端口的这个&gt;] -p 5601:5601 -d [kibana镜像]</span><br></pre></td></tr></table></figure>
<h4 id="2-镜像配置"><a href="#2-镜像配置" class="headerlink" title="2. 镜像配置"></a>2. 镜像配置</h4><blockquote>
<p>docker exec 命令参数说明：<br> -i：展示容器输入信息<br> -t：命令行交互模式<br> -u:   用户名称</p>
</blockquote>
<p><strong>以下操作均需首先进入容器</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入容器系统</span></span><br><span class="line">docker exec -it -u root [容器ID] /bin/bash</span><br></pre></td></tr></table></figure>
<h5 id="2-1-elasticsearch配置及安全设置"><a href="#2-1-elasticsearch配置及安全设置" class="headerlink" title="2.1. elasticsearch配置及安全设置"></a>2.1. elasticsearch配置及安全设置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在ES容器中执行以下命令设置ES密码，做好密码记录，防止遗忘</span></span><br><span class="line">elasticsearch-setup-passwords interactive</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 退出容器，curl看是否正常</span></span><br><span class="line">curl localhost:9200 -u elastic:&#123;password&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安全配置</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">&quot;docker-cluster&quot;</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># https cors </span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="attr">http.cors.allow-headers:</span> <span class="string">Authorization,X-Requested-With,Content-Length,Content-Type</span></span><br><span class="line"><span class="comment"># 安全认证时开启</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.security.transport.ssl.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h5 id="2-2-elasticsearch-header访问"><a href="#2-2-elasticsearch-header访问" class="headerlink" title="2.2. elasticsearch-header访问"></a>2.2. elasticsearch-header访问</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:9100/?auth_user=elastic&amp;auth_password=pwd</span><br></pre></td></tr></table></figure>
<h5 id="2-3-kibana配置及安全设置"><a href="#2-3-kibana配置及安全设置" class="headerlink" title="2.3. kibana配置及安全设置"></a>2.3. kibana配置及安全设置</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://ip:9200&quot;</span> ]</span><br><span class="line"><span class="attr">monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.reporting.encryptionKey:</span> <span class="string">&quot;a_random_string&quot;</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">&quot;kibana&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>容器技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot整合Camunda工作流引擎(一)</title>
    <url>/2021/08/30/Springboot%E6%95%B4%E5%90%88Camunda%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="Springboot整合Camunda工作流引擎-一"><a href="#Springboot整合Camunda工作流引擎-一" class="headerlink" title="Springboot整合Camunda工作流引擎(一)"></a>Springboot整合Camunda工作流引擎(一)</h3><blockquote>
<p>本篇主要介绍的主要内容有：<br>1、springboot项目引入<br>2、camunda-modler的基本使用<br>关于camunda的基本介绍，将在下篇中说明</p>
</blockquote>
<h4 id="1-pom引入"><a href="#1-pom引入" class="headerlink" title="1. pom引入"></a>1. pom引入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据库 mysql 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--get/set 方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--测试单元--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring boot 对 Camunda的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.camunda.bpm.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>camunda-bpm-spring-boot-starter-webapp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.camunda.bpm.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>camunda-bpm-spring-boot-starter-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用7.1.0版本，高版本会多一张表，但未自动生成 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.camunda.bpm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>camunda-external-task-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--swagger 支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- swagger-ui --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--actuator 支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-springboot配置文件编辑"><a href="#2-springboot配置文件编辑" class="headerlink" title="2. springboot配置文件编辑"></a>2. springboot配置文件编辑</h4><blockquote>
<p>database url最后一个参数说明：<br>如果报错，添加此参数 nullNamePatternMatchesAll=true</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://ip:3306/camunda?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8&amp;nullCatalogMeansCurrent=true&amp;nullNamePatternMatchesAll=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">pwd</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># camunda配置</span></span><br><span class="line"><span class="attr">camunda:</span></span><br><span class="line">  <span class="attr">bpm:</span></span><br><span class="line">    <span class="attr">admin-user:</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">firstName:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">filter:</span></span><br><span class="line">      <span class="attr">create:</span> <span class="string">All</span> <span class="string">tasks</span></span><br><span class="line">    <span class="attr">job-execution:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">metrics:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">db-reporter-activate:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p><strong>至此，springboot项目基本配置完成，如正常，启动项目后，输入localhost:8080，会看到如下页面</strong></p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/springboot_camunda_login_page.png"></p>
<h4 id="3-安装、使用camunda-modeler引擎编辑器"><a href="#3-安装、使用camunda-modeler引擎编辑器" class="headerlink" title="3. 安装、使用camunda-modeler引擎编辑器"></a>3. 安装、使用camunda-modeler引擎编辑器</h4><h5 id="3-1-windows中下载exe文件"><a href="#3-1-windows中下载exe文件" class="headerlink" title="3.1 windows中下载exe文件"></a>3.1 windows中下载exe文件</h5><p><strong>版本3.7.3</strong></p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/camunda_example.png"></p>
<h5 id="3-2-构建bpmn模板"><a href="#3-2-构建bpmn模板" class="headerlink" title="3.2 构建bpmn模板"></a>3.2 构建bpmn模板</h5><p>__步骤一：__选择一个流程</p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/bpmn_build_1.png"></p>
<p>__步骤二：__点击扳手选择一个用户任务，并双击键入该流程名称；如需要，此步骤可以定义适当的ID，该ID可用于后续审批流程匹配或者其他作用</p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/bpmn_build_2.png"></p>
<p>__步骤三：__选择深色圆圈，结束流程构建</p>
<p>__步骤四：__发布流程</p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/bpmn_build_3.png"></p>
<p>在modler的web页面可以看到已发布的模板</p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/bpmn_build_4.png"></p>
<p>__步骤五：__启动一个任务</p>
<ul>
<li>a. 选择页面右上角taskList，进入任务面板</li>
</ul>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/bpmn_build_5.png"></p>
<ul>
<li>b. 启动一个流程</li>
</ul>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/bpmn_build_6.png"></p>
<ul>
<li>c. 流程展示以及面板说明</li>
</ul>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/bpmn_build_7.png"></p>
<blockquote>
<p>说明：claim用来设置受理人，如需要，点击后同时可在面板Form选项中输入一些自定义参数，这些参数会在后续编码中用到</p>
</blockquote>
<p>以上为camunda-modler的基本流程</p>
]]></content>
      <categories>
        <category>工作流</category>
      </categories>
      <tags>
        <tag>Camunda</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring拦截器POST请求异常IOException Stream closed</title>
    <url>/2021/09/01/Spring%E6%8B%A6%E6%88%AA%E5%99%A8POST%E8%AF%B7%E6%B1%82%E5%BC%82%E5%B8%B8IOException%20Stream%20closed/</url>
    <content><![CDATA[<p>Spring拦截器POST请求异常nested exception is java.io.IOException: Stream closed</p>
<blockquote>
<p>异常全返回：I/O error  while reading input message; nested exception is java.io.IOException: Stream closed</p>
<p>原因：由于request一次，即一次http stream读取，当使用steam读取body体内容后，关闭了当前流，导致了此错误</p>
<p>解决方案：获取到流对象，然后再将流写进去，下次就可以再读取流了。</p>
</blockquote>
<h3 id="1-解决方案"><a href="#1-解决方案" class="headerlink" title="1. 解决方案"></a>1. 解决方案</h3><h4 id="1-1-构建RequestWrapper类"><a href="#1-1-构建RequestWrapper类" class="headerlink" title="1.1. 构建RequestWrapper类"></a>1.1. 构建RequestWrapper类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String body;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">null</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = request.getInputStream();</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">                <span class="keyword">char</span>[] charBuffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">128</span>];</span><br><span class="line">                <span class="keyword">int</span> bytesRead = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> ((bytesRead = bufferedReader.read(charBuffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    stringBuilder.append(charBuffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stringBuilder.append(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bufferedReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        body = stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ByteArrayInputStream stream = <span class="keyword">new</span> ByteArrayInputStream(body.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> stream.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getInputStream()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.body;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-使用过滤器处理RequestRrapper"><a href="#1-2-使用过滤器处理RequestRrapper" class="headerlink" title="1.2. 使用过滤器处理RequestRrapper"></a>1.2. 使用过滤器处理RequestRrapper</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        ServletRequest requestWrapper;</span><br><span class="line">        <span class="keyword">if</span> (servletRequest <span class="keyword">instanceof</span> HttpServletRequest) &#123;</span><br><span class="line">            requestWrapper = <span class="keyword">new</span> RequestWrapper((HttpServletRequest) servletRequest);</span><br><span class="line">            servletRequest = requestWrapper;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：body获取方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RequestWrapper requestWrapper = <span class="keyword">new</span> RequestWrapper(request);</span><br><span class="line">String bodyStr = requestWrapper.getBody();</span><br></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>拦截器</tag>
      </tags>
  </entry>
  <entry>
    <title>Open Api签名的一种方式</title>
    <url>/2021/09/08/%E7%AD%BE%E5%90%8D%E7%9A%84%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="open-api-签名的一种方式"><a href="#open-api-签名的一种方式" class="headerlink" title="open api 签名的一种方式"></a>open api 签名的一种方式</h3><blockquote>
<p>背景：老项目中接口不严格的验签方式，导致接口信息泄露，在此记录</p>
</blockquote>
<h4 id="1-签名规则"><a href="#1-签名规则" class="headerlink" title="1. 签名规则"></a>1. 签名规则</h4><ul>
<li><ol>
<li><p>前置条件</p>
<p>​    服务方提供appId，appSecretKey，由使用者共同维护。</p>
</li>
</ol>
</li>
<li><ol start="2">
<li><p>签名规则</p>
<p>​    签名入参：appId + secretKey + timestamp + &lt;若干实际参数&gt;，将签名入参按照ASCII码升序排序，最终以MD5加密生成签名；</p>
<p>​    其中，约定时间戳3-5秒内有效，以请求传入后台的当前时间为参考时间。</p>
</li>
</ol>
</li>
<li><ol start="3">
<li><p>请求头部传递方式</p>
<p>​    必传参数：appId + timestamp + signature，secretKey由双方（客户端/服务端）私有存储，请求过程不传递</p>
</li>
</ol>
</li>
<li><ol start="4">
<li><p>验证方式说明</p>
<p>​    验证方取得 appId + timestamp + &lt;若干实际参数&gt; + secretKey按照上述规则重新生成签名，并与请求方签名、时间戳对比，如签名一致且时间戳有效则判定本次请求有效。</p>
</li>
</ol>
</li>
</ul>
<h4 id="2-后端项目配置说明"><a href="#2-后端项目配置说明" class="headerlink" title="2. 后端项目配置说明"></a>2. 后端项目配置说明</h4><ul>
<li><ol>
<li><p>配置方式说明</p>
<p>项目配置使用：拦截器+过滤器方式配置</p>
</li>
</ol>
</li>
<li><ol start="2">
<li><p>详细步骤说明</p>
<p>签名生成类在此就不贴了，难点在于全局适配性的处理，以下为具体代码</p>
<p><strong>拦截器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">     <span class="meta">@Slf4j</span></span><br><span class="line">     <span class="meta">@Component</span></span><br><span class="line">     <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">         <span class="meta">@Value(&quot;$&#123;openapi.appid&#125;&quot;)</span></span><br><span class="line">         <span class="keyword">private</span> String localAppId;</span><br><span class="line">     </span><br><span class="line">         <span class="meta">@Value(&quot;$&#123;openapi.secretkey&#125;&quot;)</span></span><br><span class="line">         <span class="keyword">private</span> String localSecretKey;</span><br><span class="line">     </span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">             <span class="keyword">if</span> (!validRequestHeaderIsLegal(request)) &#123;</span><br><span class="line">                 <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;不合法的请求&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">         <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">validRequestHeaderIsLegal</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">             String appId = request.getHeader(<span class="string">&quot;appId&quot;</span>);</span><br><span class="line">             String signature = request.getHeader(<span class="string">&quot;signature&quot;</span>);</span><br><span class="line">             String timestamp = request.getHeader(<span class="string">&quot;timestamp&quot;</span>);</span><br><span class="line">             <span class="keyword">if</span> (validIsNullOrExist(appId, signature, timestamp)) &#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">     </span><br><span class="line">             String requestMethod = request.getMethod();</span><br><span class="line">             Map&lt;String, String&gt; signatureMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">     </span><br><span class="line">             <span class="keyword">if</span> (RequestMethod.GET.toString().equals(requestMethod)) &#123;</span><br><span class="line">                 Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">                 Set&lt;Map.Entry&lt;String, String[]&gt;&gt; entries = parameterMap.entrySet();</span><br><span class="line">                 <span class="keyword">for</span> (Map.Entry&lt;String, String[]&gt; param : entries) &#123;</span><br><span class="line">                     signatureMap.put(param.getKey(), param.getValue()[<span class="number">0</span>]);</span><br><span class="line">                     log.info(<span class="string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, param.getKey(), param.getValue()[<span class="number">0</span>]);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">     </span><br><span class="line">             <span class="keyword">if</span> (RequestMethod.POST.toString().equals(requestMethod)) &#123;</span><br><span class="line">                 <span class="comment">// 针对application/x-www-form-urlencoded类型的要特殊处理</span></span><br><span class="line">                 <span class="keyword">if</span> (request.getContentType().contains(<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)) &#123;</span><br><span class="line">                     Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">                     Set&lt;Map.Entry&lt;String, String[]&gt;&gt; entries = parameterMap.entrySet();</span><br><span class="line">                     <span class="keyword">for</span> (Map.Entry&lt;String, String[]&gt; param : entries) &#123;</span><br><span class="line">                         signatureMap.put(param.getKey(), param.getValue()[<span class="number">0</span>]);</span><br><span class="line">                         log.info(<span class="string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, param.getKey(), param.getValue()[<span class="number">0</span>]);</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     RequestWrapper requestWrapper = <span class="keyword">new</span> RequestWrapper(request);</span><br><span class="line">                     JSONObject jsonObject = JSONObject.fromObject(requestWrapper.getBody());</span><br><span class="line">                     Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = jsonObject.entrySet();</span><br><span class="line">                     <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; param : entries) &#123;</span><br><span class="line">                         signatureMap.put(param.getKey(), param.getValue());</span><br><span class="line">                         log.info(<span class="string">&quot;&#123;&#125;, &#123;&#125;&quot;</span>, param.getKey(), param.getValue());</span><br><span class="line">                     &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">             signatureMap.put(<span class="string">&quot;appId&quot;</span>, appId);</span><br><span class="line">             signatureMap.put(<span class="string">&quot;timestamp&quot;</span>, timestamp);</span><br><span class="line">             signatureMap.put(<span class="string">&quot;secretKey&quot;</span>, localSecretKey);</span><br><span class="line">     </span><br><span class="line">             <span class="keyword">if</span> (!validSignature(signatureMap, signature)) &#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">     </span><br><span class="line">             <span class="keyword">if</span> (validIsRequestTimeout(Long.parseLong(timestamp))) &#123;</span><br><span class="line">                 log.info(<span class="string">&quot;请求参数过期，请求时间戳：&#123;&#125;，当前时间戳：&#123;&#125;，入参：&#123;&#125;&quot;</span>, timestamp, System.currentTimeMillis(), JSON.toJSON(signatureMap));</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">     </span><br><span class="line">             log.info(<span class="string">&quot;本地appId：&#123;&#125;, secretKey：&#123;&#125;&quot;</span>, localAppId, localSecretKey);</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">         <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">validSignature</span><span class="params">(Map&lt;String, String&gt; signatureMap, String originSignature)</span> </span>&#123;</span><br><span class="line">             SortedMap&lt;Object, Object&gt; signatureSortMap = SignUtils.toSortedMap(JSONObject.fromObject(signatureMap));</span><br><span class="line">             String signature = SignUtils.createSign(signatureSortMap);</span><br><span class="line">             <span class="keyword">return</span> originSignature.equals(signature);</span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">         <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">validIsNullOrExist</span><span class="params">(String appId, String signature, String timestamp)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">if</span> (StringUtils.isBlank(appId) || StringUtils.isBlank(signature) || StringUtils.isBlank(timestamp)) &#123;</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (!localAppId.equals(appId)) &#123;</span><br><span class="line">                 log.info(<span class="string">&quot;appId：&#123;&#125; 不存在&quot;</span>, appId);</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">         <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">validIsRequestTimeout</span><span class="params">(<span class="keyword">long</span> timestamp)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> (System.currentTimeMillis() - timestamp) / <span class="number">1000</span> &gt; <span class="number">5</span>;</span><br><span class="line">         &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>过滤器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;</span><br><span class="line">        String uri = httpServletRequest.getRequestURI();</span><br><span class="line">        <span class="keyword">if</span>(uri.contains(<span class="string">&quot;/图像上传路径&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//图像上传的请求，不做处理</span></span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ServletRequest requestWrapper;</span><br><span class="line">            <span class="keyword">if</span> (servletRequest <span class="keyword">instanceof</span> HttpServletRequest) &#123;</span><br><span class="line">                requestWrapper = <span class="keyword">new</span> RequestWrapper((HttpServletRequest) servletRequest);</span><br><span class="line">                servletRequest = requestWrapper;</span><br><span class="line">            &#125;</span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>post方法获取流关闭问题处理</strong></p>
<blockquote>
<p>说明：post方式请求方式在拦截器处理过程中会导致流关闭，建立自动以RequestWrapper，通过过滤器产生新的servletRequest</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String body;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">null</span>;</span><br><span class="line">        InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = request.getInputStream();</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inputStream));</span><br><span class="line">                <span class="keyword">char</span>[] charBuffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">128</span>];</span><br><span class="line">                <span class="keyword">int</span> bytesRead = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> ((bytesRead = bufferedReader.read(charBuffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    stringBuilder.append(charBuffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bufferedReader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bufferedReader.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        body = stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ByteArrayInputStream stream = <span class="keyword">new</span> ByteArrayInputStream(body.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> stream.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getInputStream()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.body;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h4 id="3-配置过程中需要注意的问题"><a href="#3-配置过程中需要注意的问题" class="headerlink" title="3. 配置过程中需要注意的问题"></a>3. 配置过程中需要注意的问题</h4><ul>
<li><ol>
<li>拦截器中post请求需要重新获取request</li>
</ol>
</li>
<li><ol start="2">
<li>content-type为application/x-www-form-urlencoded的请求需要使用getParameterMap的方式，即get请求的方式去处理</li>
</ol>
</li>
<li><ol start="3">
<li>由于是老项目，对所有页面的请求不拦截</li>
</ol>
</li>
<li><ol start="4">
<li>不拦截上传文件的请求，这里在过滤器中进行排除</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>签名</tag>
      </tags>
  </entry>
  <entry>
    <title>基于SpringSecurity进行项目安全配置</title>
    <url>/2021/09/16/%E5%9F%BA%E4%BA%8ESpringSecurity%E8%BF%9B%E8%A1%8C%E9%A1%B9%E7%9B%AE%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="基于Spring-Security进行项目安全配置"><a href="#基于Spring-Security进行项目安全配置" class="headerlink" title="基于Spring Security进行项目安全配置"></a>基于Spring Security进行项目安全配置</h3><blockquote>
<p>背景说明：</p>
<p>​    项目中swagger需要做登录授权，其他接口放行</p>
<p>版本声明：</p>
<p>​    springboot版本 2.3.7.RELEASE</p>
<p>​    swagger版本：2.9.2</p>
</blockquote>
<h4 id="1、引入pom依赖"><a href="#1、引入pom依赖" class="headerlink" title="1、引入pom依赖"></a>1、引入pom依赖</h4><h5 id="1-1-springboot-security依赖引入"><a href="#1-1-springboot-security依赖引入" class="headerlink" title="1.1. springboot-security依赖引入"></a>1.1. springboot-security依赖引入</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="1-2-swagger依赖引入"><a href="#1-2-swagger依赖引入" class="headerlink" title="1.2. swagger依赖引入"></a>1.2. swagger依赖引入</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、文件配置安全属性"><a href="#2、文件配置安全属性" class="headerlink" title="2、文件配置安全属性"></a>2、文件配置安全属性</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">username</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure>

<p><strong>注: 低版本中的配置为</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">security.user.name</span>=<span class="string">username</span></span><br><span class="line"><span class="meta">security.user.password</span>=<span class="string">password</span></span><br></pre></td></tr></table></figure>

<h4 id="3、放行规则配置"><a href="#3、放行规则配置" class="headerlink" title="3、放行规则配置"></a>3、放行规则配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 放行所有路径，并对swagger进行特殊放行</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/swagger-resources/**&quot;</span>).authenticated()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/webjars/**&quot;</span>).authenticated()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/v2/**&quot;</span>).authenticated()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/swagger-ui.html/**&quot;</span>).authenticated()</span><br><span class="line">                .and().formLogin();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭csrf</span></span><br><span class="line">        http.csrf().disable();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot/Spring整合Camunda工作流引擎(二)</title>
    <url>/2021/09/24/Springboot-Spring%E6%95%B4%E5%90%88Camunda%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%BC%95%E6%93%8E-%E4%BA%8C/</url>
    <content><![CDATA[<h3 id="Springboot-Spring整合Camunda工作流引擎-二"><a href="#Springboot-Spring整合Camunda工作流引擎-二" class="headerlink" title="Springboot/Spring整合Camunda工作流引擎(二)"></a>Springboot/Spring整合Camunda工作流引擎(二)</h3><blockquote>
<p>本篇主要介绍的主要内容有：<br>1、Camunda的核心工具类<br>2、代码示例</p>
</blockquote>
<h4 id="1、Camunda核心工具类介绍"><a href="#1、Camunda核心工具类介绍" class="headerlink" title="1、Camunda核心工具类介绍"></a>1、Camunda核心工具类介绍</h4><p>​        由于Camunda是Activiti核心人员从Activiti代码拉出来的一个分支，所以，其核心具有很大的相似性，用过Activiti的朋友应该对此很熟悉，本次样例中涉及的工具类主要有：</p>
<p>1）RuntimeService</p>
<p>​        主要作用为：开始运行一个流程，查询运行时流程等</p>
<p>2）TaskService</p>
<p>​        主要作用为：任务查询，设置受理人，完成一个任务等</p>
<p>3）HistoryService</p>
<p>​        主要作用为：创建历史流程/任务，或者其他实例，并使用历史实例进行相关操作</p>
<p><strong>附Camunda API地址</strong>：<a href="https://docs.camunda.org/javadoc/camunda-bpm-platform/7.15/">https://docs.camunda.org/javadoc/camunda-bpm-platform/7.15/</a></p>
<h4 id="2、代码示例"><a href="#2、代码示例" class="headerlink" title="2、代码示例"></a>2、代码示例</h4><p>说明：Spring与SpringBoot区别主要介绍模板部署</p>
<h5 id="2-1-Spring部署"><a href="#2-1-Spring部署" class="headerlink" title="2.1. Spring部署"></a>2.1. Spring部署</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.huoda.tms.camunda.config.MySpringProcessEngineConfiguration&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processEngineName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;default&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;databaseSchemaUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jobExecutorActivate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;historyLevel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;HISTORY_LEVEL_FULL&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--流程变动时会自动发布--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;deploymentResources&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:/path/subpath/autodeploy.*.bpmn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.camunda.bpm.engine.spring.ProcessEngineFactoryBean&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;processEngineConfiguration&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;repositoryService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getRepositoryService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;runtimeService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getRuntimeService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;taskService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getTaskService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;historyService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getHistoryService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;managementService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getManagementService&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;formService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;processEngine&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getFormService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="2-2-SpringBoot部署"><a href="#2-2-SpringBoot部署" class="headerlink" title="2.2. SpringBoot部署"></a>2.2. SpringBoot部署</h5><p>SpringBoot部署直接使用配置文件发布，具体规则可参考官网属性</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">camunda:</span></span><br><span class="line">  <span class="attr">bpm:</span></span><br><span class="line">    <span class="attr">auto-deployment-enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">deployment-resource-pattern:</span> <span class="string">classpath*:**/*.bpmn</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">      <span class="attr">deploy-changed-only:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h5 id="2-3-代码示例"><a href="#2-3-代码示例" class="headerlink" title="2.3. 代码示例"></a>2.3. 代码示例</h5><p>1）获取已发布模型数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDeployedRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; deployedRepositories = repositoryService.getDeploymentResourceNames(<span class="string">&quot;1901&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String deployedRepository : deployedRepositories) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已发布模型:&#123;&#125;&quot;</span>, deployedRepository);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）启动一个流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动一个流程(发起申请)</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 实例ID：2182</span></span><br><span class="line"><span class="comment"> * 任务ID：2185</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 启动一个流程</span></span><br><span class="line">    String businessKey = <span class="string">&quot;JS00000000001&quot;</span>;</span><br><span class="line">    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(PROCESS_INSTANCE_KEY, businessKey);</span><br><span class="line">    <span class="comment">// 获取流程实例ID</span></span><br><span class="line">    String processInstanceId = processInstance.getProcessInstanceId();</span><br><span class="line">    log.info(<span class="string">&quot;\n实例ID：&#123;&#125;&quot;</span>, processInstanceId);</span><br><span class="line">    <span class="comment">// 查找当前申请任务</span></span><br><span class="line">    Task task = taskService.createTaskQuery().processInstanceId(processInstanceId).singleResult();</span><br><span class="line">    log.info(<span class="string">&quot;\n任务ID：&#123;&#125;&quot;</span>, task.getId());</span><br><span class="line">    String applierName = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    <span class="comment">// 申明任务</span></span><br><span class="line">    taskService.claim(task.getId(), applierName);</span><br><span class="line">    log.info(<span class="string">&quot;\n申明任务成功，申明人：&#123;&#125;&quot;</span>, applierName);</span><br><span class="line">    String candidateUserName = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">    <span class="comment">// 设置受理人</span></span><br><span class="line">    taskService.setAssignee(task.getId(), candidateUserName);</span><br><span class="line">    <span class="comment">// 完成申请节点任务</span></span><br><span class="line">    Map&lt;String, Object&gt; variables = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;applierId&quot;</span>, <span class="string">&quot;1235456&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;applierName&quot;</span>, applierName);</span><br><span class="line">    taskService.complete(task.getId(), variables);</span><br><span class="line">    log.info(<span class="string">&quot;\n任务申请成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置下一节点受理人，assignee在实际业务中设置为用户ID</span></span><br><span class="line">    String currentProcessInstanceId = task.getProcessInstanceId();</span><br><span class="line">    Task nextTask = taskService.createTaskQuery().processInstanceId(currentProcessInstanceId).singleResult();</span><br><span class="line">    log.info(<span class="string">&quot;task definition key is : &quot;</span> + nextTask.getTaskDefinitionKey());</span><br><span class="line">    log.info(<span class="string">&quot;下一节点ID:&#123;&#125;&quot;</span>, nextTask.getId());</span><br><span class="line">    log.info(<span class="string">&quot;下一流程实例ID:&#123;&#125;&quot;</span>, nextTask.getProcessInstanceId());</span><br><span class="line">    taskService.setAssignee(nextTask.getId(), <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3）查询所有激活状态的流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllActiveProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;HistoricProcessInstance&gt; finishedProcessInstances = historyService.createHistoricProcessInstanceQuery().active().list();</span><br><span class="line">    <span class="keyword">for</span> (HistoricProcessInstance finishedProcessInstance : finishedProcessInstances) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;实例ID：&#123;&#125;&quot;</span>, finishedProcessInstance.getId());</span><br><span class="line">        log.info(<span class="string">&quot;实例状态：&#123;&#125;&quot;</span>, finishedProcessInstance.getState());</span><br><span class="line">        log.info(<span class="string">&quot;业务key：&#123;&#125;&quot;</span>, finishedProcessInstance.getBusinessKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）查询所有完成状态的流程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllFinishedProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;HistoricProcessInstance&gt; finishedProcessInstances = historyService.createHistoricProcessInstanceQuery().finished().list();</span><br><span class="line">    <span class="keyword">for</span> (HistoricProcessInstance finishedProcessInstance : finishedProcessInstances) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;实例ID：&#123;&#125;&quot;</span>, finishedProcessInstance.getId());</span><br><span class="line">        log.info(<span class="string">&quot;实例状态：&#123;&#125;&quot;</span>, finishedProcessInstance.getState());</span><br><span class="line">        log.info(<span class="string">&quot;业务key：&#123;&#125;&quot;</span>, finishedProcessInstance.getBusinessKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5）查找所有待处理的任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllPendingTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Task&gt; taskList = taskService.createTaskQuery().orderByTaskPriority().desc().list();</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;任务ID：&#123;&#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;任务时间：&#123;&#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;任务任务受理人：&#123;&#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;任务任务名称：&#123;&#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;流程定义ID：&#123;&#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;流程实例ID：&#123;&#125;\n&quot;</span>,</span><br><span class="line">                task.getId(), task.getCreateTime(), task.getAssignee(), task.getName(), task.getProcessDefinitionId(), task.getProcessInstanceId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6）完成任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completeTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过createTaskQuery()获取参数</span></span><br><span class="line">    String taskId = <span class="string">&quot;2666&quot;</span>;</span><br><span class="line">    String processInstanceId = <span class="string">&quot;2654&quot;</span>;</span><br><span class="line">    String comment = <span class="string">&quot;同意&quot;</span>;</span><br><span class="line">    taskService.createComment(taskId, processInstanceId, comment);</span><br><span class="line">    String auditorUser = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">    Map&lt;String, Object&gt; variables = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;applierId&quot;</span>, <span class="string">&quot;1235457&quot;</span>);</span><br><span class="line">    variables.put(<span class="string">&quot;auditorUser&quot;</span>, auditorUser);</span><br><span class="line">    taskService.complete(taskId, variables);</span><br><span class="line">    <span class="comment">// 获取当前节点后的下一个待执行节点</span></span><br><span class="line">    <span class="comment">// 如果为空，且审批通过，可以认为当前审批流已结束，可以紧跟着更新业务状态</span></span><br><span class="line">    Task nextTask = taskService.createTaskQuery().processInstanceId(processInstanceId).singleResult();</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(nextTask)) &#123;</span><br><span class="line">        <span class="comment">// 下一节点流程定义ID用以区分为第几级审批人</span></span><br><span class="line">        log.info(<span class="string">&quot;下一节点流程定义ID: &quot;</span> + nextTask.getTaskDefinitionKey());</span><br><span class="line">        log.info(<span class="string">&quot;下一节点ID:&#123;&#125;&quot;</span>, nextTask.getId());</span><br><span class="line">        log.info(<span class="string">&quot;下一流程实例ID:&#123;&#125;&quot;</span>, nextTask.getProcessInstanceId());</span><br><span class="line">        taskService.setAssignee(nextTask.getId(), <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7）查询任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createTaskQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查询任务</span></span><br><span class="line">    TaskQuery taskQuery = taskService.createTaskQuery()</span><br><span class="line">            .processDefinitionKey(PROCESS_INSTANCE_KEY);</span><br><span class="line">    List&lt;Task&gt; taskList = taskQuery.list();</span><br><span class="line">    <span class="keyword">for</span> (Task task : taskList) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;任务ID：&#123;&#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;任务时间：&#123;&#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;任务任务受理人：&#123;&#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;任务任务名称：&#123;&#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;流程定义ID：&#123;&#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;流程实例ID：&#123;&#125;\n&quot;</span>,</span><br><span class="line">                task.getId(), task.getCreateTime(), task.getAssignee(), task.getName(), task.getProcessDefinitionId(), task.getProcessInstanceId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8）查询历史任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createHistoricTaskInstanceQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String processInstanceId = <span class="string">&quot;2182&quot;</span>;</span><br><span class="line">    List&lt;HistoricTaskInstance&gt; list = historyService.createHistoricTaskInstanceQuery()</span><br><span class="line">            .processInstanceId(processInstanceId)</span><br><span class="line">            .list();</span><br><span class="line">    <span class="keyword">for</span> (HistoricTaskInstance historicTaskInstance : list) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;历史任务实例ID：&#123;&#125;&quot;</span>, historicTaskInstance.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;HistoricTaskInstance&gt; finishedTask = historyService.createHistoricTaskInstanceQuery().finished().list();</span><br><span class="line">    <span class="keyword">for</span> (HistoricTaskInstance historicTaskInstance : finishedTask) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;已完成的历史任务实例：&#123;&#125;&quot;</span>, JSON.toJSONString(historicTaskInstance));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>9）删除历史流程</p>
<p>说明：删除只是给一个delete状态，并不实际删除，可用于驳回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteHistoricProcessInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String processInstanceId = <span class="string">&quot;2182&quot;</span>;</span><br><span class="line">    historyService.deleteHistoricProcessInstance(processInstanceId);</span><br><span class="line">    log.info(<span class="string">&quot;流程&#123;&#125;删除成功&quot;</span>, processInstanceId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作流</category>
      </categories>
      <tags>
        <tag>Camunda</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL索引回表</title>
    <url>/2021/09/28/MySQL%E7%B4%A2%E5%BC%95%E5%9B%9E%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="1-聚簇索引概念"><a href="#1-聚簇索引概念" class="headerlink" title="1. 聚簇索引概念"></a>1. 聚簇索引概念</h3><p>《高性能MySQL》一书中对聚簇索引的解释是：聚簇索引并不是一种单独的索引类型，而是一种数据存储方式。</p>
<p>其结构如下图：</p>
<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95.jfif"></p>
<p>具体理解为：叶子页包含了行的全部数据，叶子节点包含了索引列，即这是一种用来存储索引列和行数据的数据结构或者说存储方式。</p>
<h3 id="2-回表概念"><a href="#2-回表概念" class="headerlink" title="2. 回表概念"></a>2. 回表概念</h3><p>在理解概念之前，我们先看一下MySQL聚簇索引的设定：</p>
<p>​        1）MySQL一张表中必有一个聚簇索引，且只能由一个，这个索引的叶子节点存储了行记录。</p>
<p>​        2）表中有主键，那么这个主键就是聚簇索引。</p>
<p>​        3）如果表中未定义主键，第一个非空唯一索引列就是聚簇索引。</p>
<p>​        4）如果表中无主键且未定义任何索引，MySQL会隐式的创建一个主键，并将该主键设置为聚簇索引。</p>
<p>接下来，看一下回表的理解：</p>
<p>​        情景一：假设MySQL表中字段设定索引，且查询过程中走了聚簇索引，那么此时查询就会直接通过聚簇索引找出对应的行记录。</p>
<p>​        情景二：假设MySQL表中字段设定索引，但是查询过程中未走聚簇索引，那么此时查询过程中，首先需要通过非聚簇索引找到对应的聚簇索引，然后才能通过聚簇索引找到对应的行记录。</p>
<p>​        通过情景二可以看到，即使走普通索引，也还是需要再回到聚簇索引查询一次表数据，这个过程称为*<u>回表</u>*。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Oracle 11G</title>
    <url>/2021/10/20/Linux%E5%AE%89%E8%A3%85Oracle%2011G/</url>
    <content><![CDATA[<h4 id="1-下载安装包"><a href="#1-下载安装包" class="headerlink" title="1. 下载安装包"></a>1. 下载安装包</h4><p><a href="https://www.oracle.com/cn/database/enterprise-edition/downloads/oracle-db11g-linux.html">https://www.oracle.com/cn/database/enterprise-edition/downloads/oracle-db11g-linux.html</a></p>
<h4 id="2-解压"><a href="#2-解压" class="headerlink" title="2. 解压"></a>2. 解压</h4><ul>
<li><p>将两个压缩包解压到同一个文件夹下</p>
</li>
<li><p>解压命令：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip -d 目标文件夹 当前文件</span><br></pre></td></tr></table></figure>

<h4 id="3-准备工作"><a href="#3-准备工作" class="headerlink" title="3. 准备工作"></a>3. 准备工作</h4><h5 id="3-1-关闭SELINUX"><a href="#3-1-关闭SELINUX" class="headerlink" title="3.1. 关闭SELINUX"></a>3.1. 关闭SELINUX</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看selinux状态</span></span><br><span class="line">getenforce</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置为关闭状态</span></span><br><span class="line">setenforce 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如需永久关闭，vi /etc/selinux/config</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后将SELINUX=enforcing改为SELINUX=disabled</span></span><br></pre></td></tr></table></figure>

<h5 id="3-2-关闭防火墙"><a href="#3-2-关闭防火墙" class="headerlink" title="3.2. 关闭防火墙"></a>3.2. 关闭防火墙</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看状态</span></span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<h5 id="3-3-安装Oracle依赖"><a href="#3-3-安装Oracle依赖" class="headerlink" title="3.3. 安装Oracle依赖"></a>3.3. 安装Oracle依赖</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gcc make binutils gcc-c++ compat-libstdc++-33elfutils-libelf-devel elfutils-libelf-devel-static ksh libaio libaio-develnumactl-devel sysstat unixODBC unixODBC-devel pcre-devel –y</span><br></pre></td></tr></table></figure>

<h5 id="3-4-添加安装用户和用户组"><a href="#3-4-添加安装用户和用户组" class="headerlink" title="3.4. 添加安装用户和用户组"></a>3.4. 添加安装用户和用户组</h5><p>依次执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> groupadd oinstall</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> groupadd dba</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> useradd -g oinstall -G dba oracle</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> passwd oracle</span></span><br></pre></td></tr></table></figure>

<p>输入密码时可能会弹出提示，无需理会，二次确认密码即可</p>
<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/oralce-insatll-1.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看设置</span></span><br><span class="line">id oracle</span><br></pre></td></tr></table></figure>
<h5 id="3-4-修改内核参数配置文件"><a href="#3-4-修改内核参数配置文件" class="headerlink" title="3.4. 修改内核参数配置文件"></a>3.4. 修改内核参数配置文件</h5><ul>
<li>编辑sysctl.conf</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure>
<p>在末尾添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fs.aio-max-nr = 1048576</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.shmall = 2097152</span><br><span class="line">kernel.shmmax = 1073741824</span><br><span class="line">kernel.shmmni = 4096</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br><span class="line">net.core.rmem_default = 262144</span><br><span class="line">net.core.rmem_max = 4194304</span><br><span class="line">net.core.wmem_default = 262144</span><br><span class="line">net.core.wmem_max = 1048576</span><br></pre></td></tr></table></figure>
<ul>
<li>查看是否成功写进/etc/sysctl.conf文件中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kernel.shmmax = 1073741824为本机物理内存（2G）的一半，单位为byte</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<h5 id="3-4-修改内核参数配置文件-1"><a href="#3-4-修改内核参数配置文件-1" class="headerlink" title="3.4. 修改内核参数配置文件"></a>3.4. 修改内核参数配置文件</h5><ul>
<li>修改/etc/security/limits.conf文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br></pre></td></tr></table></figure>
<p>​    在末尾添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oracle           soft    nproc           2047</span><br><span class="line">oracle           hard    nproc           16384</span><br><span class="line">oracle           soft    nofile          1024</span><br><span class="line">oracle           hard    nofile         65536</span><br><span class="line">oracle           soft    stack           10240 </span><br></pre></td></tr></table></figure>
<ul>
<li>修改/etc/pam.d/login文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/pam.d/login</span><br></pre></td></tr></table></figure>
<p>在末尾添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">session required  /lib64/security/pam_limits.so</span><br><span class="line">session required   pam_limits.so </span><br></pre></td></tr></table></figure>
<ul>
<li>修改/etc/profile文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>
<p>在末尾添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">oracle配置</span></span><br><span class="line">if [ $USER = &quot;oracle&quot; ]; then</span><br><span class="line">  if [ $SHELL = &quot;/bin/ksh&quot; ]; then</span><br><span class="line">      ulimit -p 16384</span><br><span class="line">      ulimit -n 65536</span><br><span class="line">  else</span><br><span class="line">      ulimit -u 16384 -n 65536</span><br><span class="line">  fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>source一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h5 id="3-5-创建安装目录和设置文件权限"><a href="#3-5-创建安装目录和设置文件权限" class="headerlink" title="3.5. 创建安装目录和设置文件权限"></a>3.5. 创建安装目录和设置文件权限</h5><p>依次输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 文件夹名称需和后面一致(重点)</span></span><br><span class="line">mkdir -p /data/oracle/product/11.2.0</span><br><span class="line">mkdir /data/oracle/oradata</span><br><span class="line">mkdir /data/oracle/inventory</span><br><span class="line">mkdir /data/oracle/fast_recovery_area</span><br><span class="line">chown -R oracle:oinstall /data/oracle</span><br><span class="line">chmod -R 775 /data/oracle</span><br></pre></td></tr></table></figure>
<h5 id="3-6-设置oracle用户环境变量"><a href="#3-6-设置oracle用户环境变量" class="headerlink" title="3.6. 设置oracle用户环境变量"></a>3.6. 设置oracle用户环境变量</h5><ul>
<li>首先切换到oracle用户下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换下去在home目录下</span></span><br><span class="line">su -l oracle</span><br></pre></td></tr></table></figure>
<ul>
<li>修改profile文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim .bash_profile</span><br></pre></td></tr></table></figure>

<p>  在末尾添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ORACLE_BASE=/data/oracle</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件夹地址与前面data地址一致11.2.0</span></span><br><span class="line">ORACLE_HOME=$ORACLE_BASE/product/11.2.0</span><br><span class="line">ORACLE_SID=orcl</span><br><span class="line">PATH=$PATH:$ORACLE_HOME/bin</span><br><span class="line">export ORACLE_BASE ORACLE_HOME ORACLE_SID PATH</span><br></pre></td></tr></table></figure>

<ul>
<li>编辑完source一下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>
<h5 id="3-7-编辑静默安装响应文件"><a href="#3-7-编辑静默安装响应文件" class="headerlink" title="3.7. 编辑静默安装响应文件"></a>3.7. 编辑静默安装响应文件</h5><ul>
<li>将解压后的response文件夹复制到当前目录（/home/oracle实际为准）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp -R response-path(实际路径为准) .</span><br></pre></td></tr></table></figure>
<ul>
<li>进入当前response目录，编辑配置项</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd response</span><br><span class="line"></span><br><span class="line">vim db_install.rsp</span><br></pre></td></tr></table></figure>

<p>末尾粘贴如下脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oracle.install.option=INSTALL_DB_SWONLY</span><br><span class="line">ORACLE_HOSTNAME=CentOS</span><br><span class="line">UNIX_GROUP_NAME=oinstall</span><br><span class="line">INVENTORY_LOCATION=/data/oracle/inventory</span><br><span class="line">SELECTED_LANGUAGES=en,zh_CN</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件夹地址与前面data地址一致11.2.0</span></span><br><span class="line">ORACLE_HOME=/data/oracle/product/11.2.0</span><br><span class="line">ORACLE_BASE=/data/oracle</span><br><span class="line">oracle.install.db.InstallEdition=EE</span><br><span class="line">oracle.install.db.DBA_GROUP=dba</span><br><span class="line">oracle.install.db.OPER_GROUP=dba</span><br><span class="line">DECLINE_SECURITY_UPDATES=true</span><br></pre></td></tr></table></figure>
<h4 id="4-安装"><a href="#4-安装" class="headerlink" title="4. 安装"></a>4. 安装</h4><h5 id="4-1-安装"><a href="#4-1-安装" class="headerlink" title="4.1 安装"></a>4.1 安装</h5><ul>
<li>cd进入解压后的database目录下（不切换，仍为oracle用户）</li>
<li>执行安装命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./runInstaller -silent -responseFile /home/oracle/response/db_install.rsp -ignorePrereq</span><br></pre></td></tr></table></figure>

<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/oralce-insatll-2.jpg"></p>
<ul>
<li>安装完后执行exit命令退出oracle用户，进入root用户，依次执行命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh /data/oracle/inventory/orainstRoot.sh</span><br></pre></td></tr></table></figure>
<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/oralce-insatll-3.jpg"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh /data/oracle/product/11.2.0/root.sh</span><br></pre></td></tr></table></figure>

<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/oralce-insatll-4.jpg"></p>
<h5 id="4-2-监听配置"><a href="#4-2-监听配置" class="headerlink" title="4.2 监听配置"></a>4.2 监听配置</h5><ul>
<li>重新进入oracle用户</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su -l oracle</span><br></pre></td></tr></table></figure>
<ul>
<li>执行以下命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netca /silent /responseFile /home/oracle/response/netca.rsp</span><br></pre></td></tr></table></figure>
<ul>
<li>查看是否监听</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -tnulp|grep 1521</span><br></pre></td></tr></table></figure>

<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/oralce-insatll-6.jpg"></p>
<h5 id="4-3-创建实例"><a href="#4-3-创建实例" class="headerlink" title="4.3 创建实例"></a>4.3 创建实例</h5><ul>
<li>修改配置文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /home/oracle/response/dbca.rsp</span><br></pre></td></tr></table></figure>
<p>修改以下相关数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[GENERAL]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> oracle版本，不能更改</span></span><br><span class="line">RESPONSEFILE_VERSION = &quot;11.2.0&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description   : Type of operation</span></span><br><span class="line">OPERATION_TYPE = &quot;createDatabase&quot;</span><br><span class="line"></span><br><span class="line">[CREATEDATABASE]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description   : Global database name of the database</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 全局数据库的名字=SID+主机域名<span class="comment"># 第三方工具链接数据库的时候使用的service名称</span></span></span><br><span class="line">GDBNAME = &quot;orcl.test&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description   : System identifier (SID) of the database</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对应的实例名字</span></span><br><span class="line">SID = &quot;orcl&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description   : Name of the template</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建库用的模板文件</span></span><br><span class="line">TEMPLATENAME = &quot;General_Purpose.dbc&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description   : Password <span class="keyword">for</span> SYS user</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SYS管理员密码</span></span><br><span class="line">SYSPASSWORD = &quot;123456&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description   : Password <span class="keyword">for</span> SYSTEM user</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SYSTEM管理员密码</span></span><br><span class="line">SYSTEMPASSWORD = &quot;123456&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description   : Password <span class="keyword">for</span> SYSMAN user</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SYSMAN管理员密码</span></span><br><span class="line">SYSMANPASSWORD = &quot;123456&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description   : Password <span class="keyword">for</span> DBSNMP user</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DBSNMP管理员密码</span></span><br><span class="line">DBSNMPPASSWORD = &quot;123456&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description   : Location of the data file<span class="string">&#x27;s</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> 数据文件存放目录</span></span></span><br><span class="line">DATAFILEDESTINATION =/data/oracle/oradata</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string"> Description   : Location of the data file&#x27;</span>s</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复数据存放目录</span></span><br><span class="line">RECOVERYAREADESTINATION=/data/oracle/fast_recovery_area</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description   : Character <span class="built_in">set</span> of the database</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 字符集，重要!!! 建库后一般不能更改，所以建库前要确定清楚。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (CHARACTERSET = <span class="string">&quot;AL32UTF8&quot;</span> NATIONALCHARACTERSET= <span class="string">&quot;UTF8&quot;</span>)</span></span><br><span class="line">CHARACTERSET = &quot;UTF8&quot;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Description   : total memory <span class="keyword">in</span> MB to allocate to Oracle</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> oracle内存1638MB,物理内存2G*80%</span></span><br><span class="line">TOTALMEMORY = &quot;1638&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>进行静默配置</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbca -silent -responseFile /home/oracle/response/dbca.rsp</span><br></pre></td></tr></table></figure>
<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/oralce-insatll-7.jpg"></p>
<ul>
<li>实例检查</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep ora_ | grep -v grep</span><br></pre></td></tr></table></figure>
<ul>
<li>监听状态查看</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsnrctl status</span><br></pre></td></tr></table></figure>
<ul>
<li>状态查看</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlplus / as sysdba</span><br><span class="line"><span class="meta">#</span><span class="bash"> SQl 查看</span></span><br><span class="line">select status from v$instance</span><br></pre></td></tr></table></figure>

<h5 id="4-4-创建用户"><a href="#4-4-创建用户" class="headerlink" title="4.4 创建用户"></a>4.4 创建用户</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">USER</span> admin IDENTIFIED <span class="keyword">BY</span> admin123;</span><br><span class="line"><span class="comment">-- 授予新登陆的用户创建权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> session <span class="keyword">to</span> admin;</span><br><span class="line"><span class="comment">-- 授予dba权限</span></span><br><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> admin;</span><br><span class="line"><span class="comment">-- 连接测试</span></span><br><span class="line"><span class="keyword">connect</span> admin<span class="operator">/</span>admin123;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>数据库安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle DG主从同步配置</title>
    <url>/2021/10/20/Oracle%20DG%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>本部分主要介绍主从同步</p>
<p>环境信息</p>
<blockquote>
<p>系统：CentOS 7<br>Oracle版本：Oracle 11g R2(11.0.2.1.0)</p>
<p>场景：主从，主库读写，从库读</p>
<p>文档说明：文档中的配置，有些是主/备都要配置的，需要注意</p>
</blockquote>
<p>官方参考文档：<a href="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/Oracle%20DG%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3.pdf">Oracle DG官方文档.pdf</a></p>
<h3 id="1-配置准备"><a href="#1-配置准备" class="headerlink" title="1.  配置准备"></a>1.  配置准备</h3><h4 id="1-修改实例唯一标识-db-unique-name"><a href="#1-修改实例唯一标识-db-unique-name" class="headerlink" title="1) 修改实例唯一标识 db_unique_name"></a>1) 修改实例唯一标识 db_unique_name</h4><p>该标识是区分实例的依据，后面会用到（很重要）</p>
<ul>
<li>进入SQL命令行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlplus / as sysdba</span><br></pre></td></tr></table></figure>
<ul>
<li>先查看一下</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> db_unique_name</span><br></pre></td></tr></table></figure>
<ul>
<li>开始修改</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 示例 alter system set db_unique_name=&#x27;orcl_dg02[实例名称，自定义]&#x27; scope=spfile;</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> db_unique_name<span class="operator">=</span><span class="string">&#x27;orcl_dg01&#x27;</span> <span class="keyword">scope</span><span class="operator">=</span>spfile;</span><br><span class="line"></span><br><span class="line">shutdown immediate;</span><br><span class="line"></span><br><span class="line">startup;</span><br></pre></td></tr></table></figure>
<ul>
<li>修改完成后确认一下，看是否修改过来</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 方式一：</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> db_unique_name</span><br><span class="line"><span class="comment">-- 方式二：退出到shell命令行</span></span><br><span class="line">lsnrctl status</span><br></pre></td></tr></table></figure>
<h4 id="2-归档状态检测"><a href="#2-归档状态检测" class="headerlink" title="2) 归档状态检测"></a>2) 归档状态检测</h4><ul>
<li>检查</li>
</ul>
<p>配置DG必须使主库处于归档状态，具体检测方法为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlplus / as sysdba</span><br></pre></td></tr></table></figure>
<p>查看归档状态</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> archive log list</span><br></pre></td></tr></table></figure>

<p>正常情况为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Database log mode              Archive Mode</span><br><span class="line">Automatic archival             Enabled</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>非开启状态为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Database log mode              Archive Mode</span><br><span class="line">Automatic archival             Enabled</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<ul>
<li>开启</li>
</ul>
<p>如果未开启，应先开启归档，操作方法为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1.关闭数据库</span></span><br><span class="line">shutdown immediate</span><br><span class="line"><span class="comment">-- 2.启动mount模式</span></span><br><span class="line">startup mount</span><br><span class="line"><span class="comment">-- 3.开启归档模式（关闭为alter database noarchivelog;）</span></span><br><span class="line"><span class="keyword">alter</span> database archivelog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> database <span class="keyword">open</span>;</span><br><span class="line"><span class="comment">-- 4. 检查是否开启</span></span><br><span class="line">archive log list;</span><br></pre></td></tr></table></figure>

<ul>
<li>日志状态检查</li>
</ul>
<p>说明：主库日志必须强制开启状态</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> database force logging;</span><br></pre></td></tr></table></figure>



<h4 id="3-配置网络通信与监听"><a href="#3-配置网络通信与监听" class="headerlink" title="3) 配置网络通信与监听"></a>3) 配置网络通信与监听</h4><p>——————重点来了——————</p>
<blockquote>
<p>说明：</p>
<p>$ORACLE_HOME：Oracle data目录全局变量，oracle的数据/恢复文件/配置等都放在这个路径底下</p>
</blockquote>
<ul>
<li>配置oracle密码文件</li>
</ul>
<p><u>可能存在，如存在不需要再生成</u>，这个文件很重要，主备要保持一致，常见做法是将主库的复制到备用库对应位置，复制前最好先备份</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.进入目录</span></span><br><span class="line">cd $ORACLE_HOME/dbs/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. orapworcl为密码配置文件名称，命名规则为[orapw+实例名称]，可通过sql查询</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> select instance_name from v<span class="variable">$instance</span></span></span><br><span class="line">orapwd file=$ORACLE_HOME/dbs/orapworcl password=syspassword entries=30;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 复制到备库对应目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 语法 scp 文件名 ip:路径</span></span><br><span class="line">scp orapworcl ip:/data/oracle/product/11.2.0/dbs/</span><br></pre></td></tr></table></figure>

<ul>
<li>配置监听 istener.ora （主/备都要配置）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 进入编辑模式</span></span><br><span class="line">vim $ORACLE_HOME/network/admin/listener.ora</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 开始编辑</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SID_LIST_LISTENER是必须添加的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> GLOBAL_DBNAME可通过SQL查询：select * from global_name;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ORACLE_HOME可以通过cat命令查看当前HOME位置：cat <span class="variable">$ORACLE_HOME</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SID_NAME可通过SQL查询：select instance_name from  V<span class="variable">$instance</span>;</span></span><br><span class="line">SID_LIST_LISTENER =</span><br><span class="line">  (SID_LIST =</span><br><span class="line">    (SID_DESC =</span><br><span class="line">      (GLOBAL_DBNAME = ORCL.TEST)</span><br><span class="line">      (SID_NAME = orcl)</span><br><span class="line">      (ORACLE_HOME = /data/oracle/product/11.2.0)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">LISTENER =</span><br><span class="line">  (DESCRIPTION_LIST =</span><br><span class="line">    (DESCRIPTION =</span><br><span class="line">      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">ADR_BASE_LISTENER = /data/oracle</span><br></pre></td></tr></table></figure>

<ul>
<li>配置网络监听tnsnames.ora （主/备都要配置）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.进入编辑模式</span></span><br><span class="line">vim $ORACLE_HOME/network/admin/tnsnames.ora</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.开始编辑</span></span><br><span class="line">ORCL = # 相当于网络名称，后面tnsping的时候直接ping这个名称</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.75.132 )(PORT = 1521)) # 当前库IP</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = orcl_1.test) # 可通过SQL查询：show parameter service_names;</span><br><span class="line">      (UR=A) # 这里必须加上</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下同，不在赘述</span></span><br><span class="line">ORCL1 =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">   (ADDRESS_LIST =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.75.133)(PORT = 1521))</span><br><span class="line">   )</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVICE_NAME = orcl_2.test)</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (UR=A)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"><span class="meta"> #</span><span class="bash"> 3. 重启监听</span></span><br><span class="line">lsnrctl reload</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启后查看是否成功</span></span><br><span class="line">lsnrctl status</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4 验证网络监听</span></span><br><span class="line">tnsping orcl1 # orcl1即上面配置的名称 ORCL1</span><br><span class="line">tnsping orcl</span><br></pre></td></tr></table></figure>

<h4 id="4）主库配置Profile文件-（主-备都要配置）"><a href="#4）主库配置Profile文件-（主-备都要配置）" class="headerlink" title="4）主库配置Profile文件 （主/备都要配置）"></a>4）主库配置Profile文件 （主/备都要配置）</h4><p>这里先简介以下pfile和spile， pfile是oracle静态的初始化文件，spfile是oracle二进制形式动态的初始化文件。Oracle在启动时会先加载spfile，如果spfile加载失败,才会去加载pfile。<br>    所以，为了让配置生效，我们会先创建pfile，在pfile里编辑好以后，再通过把pfile拷贝到spfile，具体分以下两步：</p>
<p>​    1）编辑pfile<br>​    2）编辑spfile</p>
<p>​    进入sql 命令行创建profile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入SQL shell</span></span><br><span class="line">sqlplus / as sysdba</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建profile文件</span></span><br><span class="line">create pfile from spfile;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出到shell</span></span><br><span class="line">quit;</span><br></pre></td></tr></table></figure>
<ul>
<li> 编辑主库配置文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> initorcl.ora为自己的配置文件，命名以自己的为准，规则为[init+实例名称]</span></span><br><span class="line">vi $ORACLE_HOME/dbs/initorcl.ora</span><br></pre></td></tr></table></figure>

<p>开始编辑，以下为示例（示例中的注释在实际操作时不可以有），<u><em>配置文件需要仔细核对，否则会导致日志文件无法同步</em></u></p>
<blockquote>
<p>说明：备库配置文件模仿主库配置文件修改即可，正常情况只需要把实例标识做颠倒，如有其他不同，需要仔细核对</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">orcl.__db_cache_size=780140544</span><br><span class="line">orcl.__java_pool_size=4194304</span><br><span class="line">orcl.__large_pool_size=4194304</span><br><span class="line">orcl.__oracle_base=&#x27;/data/oracle&#x27;#ORACLE_BASE set from environment</span><br><span class="line">orcl.__pga_aggregate_target=645922816</span><br><span class="line">orcl.__sga_target=1073741824</span><br><span class="line">orcl.__shared_io_pool_size=0</span><br><span class="line">orcl.__shared_pool_size=272629760</span><br><span class="line">orcl.__streams_pool_size=0</span><br><span class="line">*.audit_file_dest=&#x27;/data/oracle/admin/orcl/adump&#x27;</span><br><span class="line">*.audit_trail=&#x27;db&#x27;</span><br><span class="line">*.compatible=&#x27;11.2.0.0.0&#x27;</span><br><span class="line">*.control_files=&#x27;/data/oracle/oradata/orcl/control01.ctl&#x27;,&#x27;/data/oracle/flash_recovery_area/orcl/control02.ctl&#x27;</span><br><span class="line">*.db_block_size=8192</span><br><span class="line">*.db_name=&#x27;orcl&#x27;</span><br><span class="line">*.db_recovery_file_dest=&#x27;/data/oracle/flash_recovery_area&#x27;</span><br><span class="line">*.db_recovery_file_dest_size=4070572032</span><br><span class="line">*.db_unique_name=&#x27;orcl_1&#x27; # 当前实例的唯一标识，必须有</span><br><span class="line">*.diagnostic_dest=&#x27;/data/oracle&#x27;</span><br><span class="line">*.dispatchers=&#x27;(PROTOCOL=TCP) (SERVICE=orclXDB)&#x27;</span><br><span class="line">*.open_cursors=300</span><br><span class="line">*.pga_aggregate_target=643825664</span><br><span class="line">*.processes=150</span><br><span class="line">*.remote_login_passwordfile=&#x27;EXCLUSIVE&#x27;</span><br><span class="line">*.sga_target=1073741824</span><br><span class="line">*.undo_tablespace=&#x27;UNDOTBS1&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 以下为新增配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cover文件位置，这里，参数1：主库，参数2：备库；可以有多个</span></span><br><span class="line">*.db_file_name_convert=&#x27;/data/oracle/oradata/&#x27;,&#x27;/data/oracle/oradata/&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 主备切换时备库的标识，即当前库变为备库</span></span><br><span class="line">*.fal_client=&#x27;orcl_1.test&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 主备切换时主库的标识</span></span><br><span class="line">*.fal_server=&#x27;orcl_2.test&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前需要配置的实例，即 主（orcl_1，orcl_2）</span></span><br><span class="line">*.log_archive_config=&#x27;DG_CONFIG=(orcl_1,orcl_2)&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前库恢复 日志文件 的位置，如果么有这个文件夹，可以手动创建，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命名方式：/data/oracle/fast_recovery_area/xxxx，可自己定义</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DB_UNIQUE_NAME：当前实例唯一标识</span></span><br><span class="line">*.log_archive_dest_1=&#x27;LOCATION=/data/oracle/fast_recovery_area/orcl/archivelog LGWR VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=orcl_1&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> SERVICE远端实例的网络标识，即前面网络配置中的orcl1</span></span><br><span class="line">*.log_archive_dest_2=&#x27;SERVICE=orcl1 ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=orcl_2&#x27;</span><br><span class="line">*.log_archive_dest_state_1=&#x27;ENABLE&#x27;</span><br><span class="line">*.log_archive_dest_state_2=&#x27;ENABLE&#x27;</span><br><span class="line"><span class="meta">#</span><span class="bash"> log_file_name_convert=‘dir1’,<span class="string">&#x27;dir2&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示当前主库发生主备角色转换时，原备库目录dir1’下的日志文件会转换并生成到原主库的dir2目录下</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里两个文件可以命名为一样</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同上面一样，没有的话需要手动创建</span></span><br><span class="line">*.log_file_name_convert=&#x27;/data/oracle/oradata/orcl/&#x27;,&#x27;/data/oracle/oradata/orcl/&#x27;</span><br><span class="line">*.standby_file_management=&#x27;AUTO&#x27;</span><br></pre></td></tr></table></figure>
<ul>
<li>重建spfile</li>
</ul>
<p>  首先备份原spfile</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- sql命令行查询spfile位置</span><br><span class="line">show parameter spfile</span><br><span class="line">-- 退出SQL命令行，拷贝原spfile路径以实际路径为准</span><br><span class="line">quit;</span><br><span class="line">cp path/spfileorcl.ora path/spfileorcl.ora.bak</span><br><span class="line">-- 创建spfile，这里测试时pfile文件名为initorcl.ora，实际操作中以自己的为准</span><br><span class="line">-- 先关闭数据库，生产环境关闭数据库谨慎操作，确认无线上操作</span><br><span class="line">shutdown immediate;</span><br><span class="line"></span><br><span class="line">CREATE SPFILE FROM PFILE=&#x27;initorcl.ora&#x27;;</span><br><span class="line">-- 复制完后，重启数据库</span><br><span class="line">statup;</span><br></pre></td></tr></table></figure>
<h4 id="5）创建controlfile，datafile文件夹，用作rman备份"><a href="#5）创建controlfile，datafile文件夹，用作rman备份" class="headerlink" title="5）创建controlfile，datafile文件夹，用作rman备份"></a>5）创建controlfile，datafile文件夹，用作rman备份</h4><p><strong>主库</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.----------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换root用户</span></span><br><span class="line">su root</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建datafile文件位置，以下为实例，规则自定义，这里放在了<span class="variable">$oracle_home</span>下</span></span><br><span class="line">mkdir -p /data/oracle/oradata/orcl/datafile/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新所有权</span></span><br><span class="line">chown -R oracle:oinstall /data/oracle/oradata/orcl/datafile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建controlfile文件位置，以下为实例，规则自定义，这里放在了<span class="variable">$oracle_home</span>下</span></span><br><span class="line">mkdir -p /data/oracle/oradata/orcl/controlfile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新所有权</span></span><br><span class="line">chown -R oracle:oinstall /data/oracle/oradata/orcl/controlfile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建archivelog文件夹</span></span><br><span class="line">mkdir -p /data/oracle/fast_recovery_area/orcl/archivelog</span><br><span class="line"><span class="meta">#</span><span class="bash"> 授权</span></span><br><span class="line">chown -R oracle:oinstall /data/oracle/fast_recovery_area/orcl/archivelog</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.----------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换 oracle用户</span></span><br><span class="line">su -l oracle</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入 rman</span></span><br><span class="line">rman target /</span><br><span class="line"><span class="meta">#</span><span class="bash"> rman配置</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> configure controlfile autobackup on;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> configure controlfile autobackup format <span class="keyword">for</span> device <span class="built_in">type</span> disk to <span class="string">&#x27;/data/oracle/oradata/orcl/controlfile/%F&#x27;</span>;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> backup device <span class="built_in">type</span> disk format <span class="string">&#x27;/data/oracle/oradata/orcl/datafile/%U&#x27;</span> database plus archivelog;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/oralce-insatll-8.jpg"></p>
<p><strong>备库</strong></p>
<ul>
<li><u><em>[重要]</em></u>上述步骤操作完后，将controlfile和datafile底下的文件全部拷贝到备库中对应目录下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1.----------------------------------------------------------------</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换root用户</span></span><br><span class="line">su root</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建datafile文件位置，以下为实例，规则自定义，这里放在了<span class="variable">$oracle_home</span>下</span></span><br><span class="line">mkdir -p /data/oracle/oradata/orcl/datafile/backup</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新所有权</span></span><br><span class="line">chown -R oracle:oinstall /data/oracle/oradata/orcl/datafile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建controlfile文件位置，以下为实例，规则自定义，这里放在了<span class="variable">$oracle_home</span>下</span></span><br><span class="line">mkdir -p /data/oracle/oradata/orcl/controlfile/backup</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新所有权</span></span><br><span class="line">chown -R oracle:oinstall /data/oracle/oradata/orcl/controlfile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建archivelog文件夹</span></span><br><span class="line">mkdir -p /data/oracle/fast_recovery_area/orcl/archivelog</span><br><span class="line"><span class="meta">#</span><span class="bash"> 授权</span></span><br><span class="line">chown -R oracle:oinstall /data/oracle/fast_recovery_area/orcl/archivelog</span><br></pre></td></tr></table></figure>
<p>拷贝主库控制文件到备库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /data/oracle/oradata/orcl/datafile/* 目的ip:/data/oracle/oradata/orcl/datafile/</span><br><span class="line">scp /data/oracle/oradata/orcl/controlfile/* 目的ip:/data/oracle/oradata/orcl/controlfile/</span><br></pre></td></tr></table></figure>

<h4 id="6）-备库开始nomount（非归档）模式"><a href="#6）-备库开始nomount（非归档）模式" class="headerlink" title="6） 备库开始nomount（非归档）模式"></a>6） 备库开始nomount（非归档）模式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入sql命令行</span></span><br><span class="line">sqlplus / as sysdba</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启nomount</span></span><br><span class="line"><span class="operator">&gt;</span> shutdown immediate;</span><br><span class="line"><span class="operator">&gt;</span> startup nomount;</span><br><span class="line"><span class="comment">-- 退出</span></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure>
<h4 id="7）主库备份文件到备库"><a href="#7）主库备份文件到备库" class="headerlink" title="7）主库备份文件到备库"></a>7）主库备份文件到备库</h4><p>这个过程可能比较久，耐心等待</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入rman</span></span><br><span class="line">rman target /</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 连接备库</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> connect auxiliary 账号/密码@备库网络通讯标识</span></span><br><span class="line">connect auxiliary sys/123456@orcl1</span><br></pre></td></tr></table></figure>
<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/oralce-insatll-9.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开始同步</span><br><span class="line"># nofilenamecheck命令表示不检查，主备备份文件夹名称一致时需要使用该参数</span><br><span class="line">duplicate target database for standby nofilenamecheck;</span><br></pre></td></tr></table></figure>
<h4 id="8）创建归档日志"><a href="#8）创建归档日志" class="headerlink" title="8）创建归档日志"></a>8）创建归档日志</h4><p>​    redo log是主备同步的重要文件，并且要求主备上面redo log文件的大小必须一致</p>
<p>​    创建standby logfile备库归档日志，除oracle_home外的路径可自定义，这个过程可能很慢，取决于机器性能，*<u>主库/备库需要做同样的操作</u>*</p>
<ul>
<li><p>先创建好文件夹（主/备）</p>
<p>先退出oracle用户</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/oracle/product/11.2.0/redolog</span><br><span class="line">chown -R oracle:oinstall /data/oracle/product/11.2.0/redolog</span><br></pre></td></tr></table></figure>
<ul>
<li><p>创建redo log（主/备）</p>
<p>进入oracle用户</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">ADD</span> STANDBY LOGFILE <span class="string">&#x27;/data/oracle/product/11.2.0/redolog/rdo01_dg1.log&#x27;</span> size <span class="number">512</span>M;</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">ADD</span> STANDBY LOGFILE <span class="string">&#x27;/data/oracle/product/11.2.0/redolog/rdo02_dg1.log&#x27;</span> size <span class="number">512</span>M;</span><br><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">ADD</span> STANDBY LOGFILE <span class="string">&#x27;/data/oracle/product/11.2.0/redolog/rdo03_dg1.log&#x27;</span> size <span class="number">512</span>M;</span><br></pre></td></tr></table></figure>
<h3 id="2-开始同步"><a href="#2-开始同步" class="headerlink" title="2. 开始同步"></a>2. 开始同步</h3><h4 id="1）备库开始同步"><a href="#1）备库开始同步" class="headerlink" title="1）备库开始同步"></a>1）备库开始同步</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 进入数据库</span></span><br><span class="line">sqlplus <span class="operator">/</span> <span class="keyword">as</span> sysdba</span><br><span class="line"><span class="comment">-- 查看实例状态是否mount模式</span></span><br><span class="line"><span class="keyword">select</span> instance_name,status <span class="keyword">from</span> v$instance;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 主/备查看日志队列是否正常，正常情况下主/备日志队列号是一致的</span></span><br><span class="line"><span class="keyword">SELECT</span> SEQUENCE#, REGISTRAR, FIRST_TIME, NEXT_TIME, APPLIED <span class="keyword">FROM</span> V$ARCHIVED_LOG <span class="keyword">ORDER</span> <span class="keyword">BY</span> SEQUENCE#;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> SEQUENCE#,APPLIED <span class="keyword">FROM</span> V$ARCHIVED_LOG <span class="keyword">ORDER</span> <span class="keyword">BY</span> SEQUENCE#;</span><br></pre></td></tr></table></figure>
<p>日志队列查询结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SEQUENCE# REGISTR FIRST_TIM NEXT_TIME APPLIED</span><br><span class="line">---------- ------- --------- --------- ---------</span><br><span class="line">	22 LGWR    14-OCT-21 14-OCT-21 NO</span><br><span class="line">	22 LGWR    14-OCT-21 14-OCT-21 YES</span><br><span class="line">	23 LGWR    14-OCT-21 15-OCT-21 NO</span><br><span class="line">	23 LGWR    14-OCT-21 15-OCT-21 YES</span><br><span class="line">	24 ARCH    15-OCT-21 15-OCT-21 NO</span><br><span class="line">	24 ARCH    15-OCT-21 15-OCT-21 YES</span><br><span class="line">	25 LGWR    15-OCT-21 15-OCT-21 NO</span><br><span class="line">	25 LGWR    15-OCT-21 15-OCT-21 YES</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 开启实时同步</span></span><br><span class="line"><span class="keyword">alter</span> database recover managed standby database <span class="keyword">using</span> <span class="keyword">current</span> logfile <span class="keyword">disconnect</span> <span class="keyword">from</span> session;</span><br><span class="line"><span class="comment">-- 取消同步</span></span><br><span class="line"><span class="keyword">alter</span> database recover managed standby database cancel;</span><br></pre></td></tr></table></figure>
<ul>
<li>开启后稍等片刻再次查证</li>
</ul>
<p>【查证方式一】</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT SEQUENCE#, REGISTRAR, FIRST_TIME, NEXT_TIME, APPLIED FROM V$ARCHIVED_LOG ORDER BY SEQUENCE#;</span><br></pre></td></tr></table></figure>
<p>【查证方式二】</p>
<p>直接在数据库主库新增，看备库是否同步</p>
<h4 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h4><h4 id="1-可能用到的命令"><a href="#1-可能用到的命令" class="headerlink" title="1.可能用到的命令"></a>1.可能用到的命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> recover managed standby database using current logfile disconnect from session;</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> startup force mount pfile=<span class="string">&#x27;/data/oracle/product/11.2.0/dbs/initorcl.ora&#x27;</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> redo <span class="built_in">log</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> select group<span class="comment">#,member from v$logfile;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找service_name</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show parameter service;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启数据库</span></span><br><span class="line">alter database open;</span><br><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line"> select error from v$archive_dest where target=&#x27;STANDBY&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改db启动项和停止项命令，然后修改ORACLE_HOME_LISTNER=<span class="variable">$1</span>为ORACLE_HOME_LISTNER=<span class="variable">$ORACLE_HOME</span></span></span><br><span class="line">vim $ORACLE_HOME/bin/dbstart</span><br><span class="line">vim $ORACLE_HOME/bin/dbshut</span><br></pre></td></tr></table></figure>

<h4 id="2-常见问题"><a href="#2-常见问题" class="headerlink" title="2.常见问题"></a>2.常见问题</h4><p>1）日志不同步</p>
<ul>
<li>主库查验</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- sql 命令行执行</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> log_archive_dest_state_2;</span><br><span class="line"><span class="comment">-- 处理方式</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> LOG_ARCHIVE_DEST_STATE_2<span class="operator">=</span><span class="string">&#x27;ENABLE&#x27;</span>; </span><br></pre></td></tr></table></figure>

<p>正常情况：value为enable</p>
<p>NAME                     TYPE     VALUE</p>
<hr>
<p>log_archive_dest_state_2         string     enable<br>log_archive_dest_state_20         string     enable<br>log_archive_dest_state_21         string     enable<br>log_archive_dest_state_22         string     enable<br>log_archive_dest_state_23         string     enable<br>log_archive_dest_state_24         string     enable<br>log_archive_dest_state_25         string     enable<br>log_archive_dest_state_26         string     enable<br>log_archive_dest_state_27         string     enable<br>log_archive_dest_state_28         string     enable<br>log_archive_dest_state_29         string     enable</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- sql 命令行执行</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">parameter</span> log_archive_dest_2</span><br><span class="line"><span class="comment">-- 处理方式</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> LOG_ARCHIVE_DEST_2<span class="operator">=</span><span class="string">&#x27;SERVICE=orcl1  ASYNC VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE) DB_UNIQUE_NAME=orcl_dg02&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>异常情况：value为空</p>
<p>NAME                     TYPE     VALUE</p>
<hr>
<p>log_archive_dest_2             string<br>log_archive_dest_20             string<br>log_archive_dest_21             string<br>log_archive_dest_22             string<br>log_archive_dest_23             string<br>log_archive_dest_24             string<br>log_archive_dest_25             string<br>log_archive_dest_26             string<br>log_archive_dest_27             string<br>log_archive_dest_28             string<br>log_archive_dest_29             string</p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>主从同步</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle DG主备切换</title>
    <url>/2021/10/20/Oracle%20DG%E4%B8%BB%E5%A4%87%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p>环境信息</p>
<blockquote>
<p>系统：CentOS 7<br>Oracle版本：Oracle 11g R2(11.0.2.1.0)</p>
<p>场景：主备，主库读写，备库读</p>
</blockquote>
<p>接上文，本部分主要介绍主备切换</p>
<p>主备切换经历主库变备库，备库变主库两个主要阶段，以下三幅图顺序展示了这些变化</p>
<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/oracle-dg-sw-01.jpg"></p>
<div align="center"><strong>图一</strong></div> 

<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/oracle-dg-sw-02.jpg"></p>
<div align="center"><strong>图二</strong></div> 

<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/oracle-dg-sw-03.jpg"></p>
<div align="center"><strong>图三</strong></div> 

<h4 id="1-切换先决条件（务必确认完成）"><a href="#1-切换先决条件（务必确认完成）" class="headerlink" title="1. 切换先决条件（务必确认完成）"></a>1. 切换先决条件（务必确认完成）</h4><p>1）校验初始化参数，确保主备库中的参数LOG_ARCHIVE_DEST_n和ARCHIVE_DEST_STATE_n正常配置。<br>2）校验备库是否为日志开启模式，即上篇中讲到的ARCHIVELOG是否开启。<br>3）确保主库和备库的具有相匹配的temporary file。<br>4）消除应用重做时可能对将成为新主数据库的备用数据库有效的任何延迟。<br>具体做法（未切换前备库操作)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="comment">-- sql命令行</span></span><br><span class="line"><span class="keyword">COLUMN</span> NAME FORMAT A18</span><br><span class="line"><span class="keyword">COLUMN</span> <span class="keyword">VALUE</span> FORMAT A16</span><br><span class="line"><span class="keyword">COLUMN</span> TIME_COMPUTED FORMAT A24</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> V$DATAGUARD_STATS;</span><br></pre></td></tr></table></figure>

<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/oracle-dg-sw-04.jpg"></p>
<p>通过上图发现没有延时<br>5）确保其他实例关闭，即在角色转换期间，其他实例不能在线，等当前实例切换完毕后再重新联机；具体操作时关闭当前库的监听即可。</p>
<h4 id="2-开始切换"><a href="#2-开始切换" class="headerlink" title="2.开始切换"></a>2.开始切换</h4><p>​        切换分两个阶段进行。在第一阶段，现有的主数据库会过渡到备用角色。在第二阶段，备用数据库过渡到主要角色。</p>
<h5 id="1）主库切换"><a href="#1）主库切换" class="headerlink" title="1）主库切换"></a>1）主库切换</h5><p>关闭当前库的监听</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsnrctl stop</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 校验主库状态</span></span><br><span class="line"><span class="keyword">SELECT</span> SWITCHOVER_STATUS <span class="keyword">FROM</span> V$DATABASE;</span><br><span class="line"><span class="comment">-- 如果主库状态为 TO STANDBY表示可切换，如果不是则检查参数LOG_ARCHIVE_DEST_n配置是否正常。</span></span><br><span class="line"><span class="comment">-- 2. 开始切换</span></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">COMMIT</span> <span class="keyword">TO</span> SWITCHOVER <span class="keyword">TO</span> PHYSICAL STANDBY;</span><br><span class="line"><span class="comment">-- 3. 重启主库</span></span><br><span class="line"> SHUTDOWN IMMEDIATE;</span><br><span class="line"> STARTUP MOUNT;</span><br><span class="line"> <span class="comment">--4. 校验是否切换成功,如果成功状态为 TO PRIMARY</span></span><br><span class="line"> <span class="keyword">SELECT</span> SWITCHOVER_STATUS <span class="keyword">FROM</span> V$DATABASE;</span><br></pre></td></tr></table></figure>

<p>如果主库状态是 SESSIONS ACTIVE，则需要切换其状态</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">COMMIT</span> <span class="keyword">TO</span> SWITCHOVER <span class="keyword">TO</span> PHYSICAL STANDBY <span class="keyword">WITH</span> SESSION SHUTDOWN;</span><br></pre></td></tr></table></figure>

<h5 id="2）备库切换"><a href="#2）备库切换" class="headerlink" title="2）备库切换"></a>2）备库切换</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1. 校验主库状态</span></span><br><span class="line"><span class="keyword">SELECT</span> SWITCHOVER_STATUS <span class="keyword">FROM</span> V$DATABASE;</span><br><span class="line"><span class="comment">-- 2. 如果备库状态为TO PRIMARY,则可直接切换</span></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">COMMIT</span> <span class="keyword">TO</span> SWITCHOVER <span class="keyword">TO</span> <span class="keyword">PRIMARY</span>;</span><br><span class="line"><span class="comment">-- 3. 重启主库</span></span><br><span class="line"> SHUTDOWN IMMEDIATE;</span><br><span class="line"> STARTUP;</span><br><span class="line"> <span class="comment">--4. 校验是否切换成功,如果成功状态为 TO PRIMARY</span></span><br><span class="line"> <span class="keyword">SELECT</span> SWITCHOVER_STATUS <span class="keyword">FROM</span> V$DATABASE;</span><br><span class="line"> <span class="comment">--5. 开启强制日志</span></span><br><span class="line"> <span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> SWITCH LOGFILE;</span><br></pre></td></tr></table></figure>

<p>如果备库为SESSION ACTIVE，则需要使用SESSION SHUTDOWN方式关闭</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE COMMIT TO SWITCHOVER TO PRIMARY WITH SESSION SHUTDOWN;</span><br></pre></td></tr></table></figure>

<h5 id="3）校验"><a href="#3）校验" class="headerlink" title="3）校验"></a>3）校验</h5><p>主备库切换过来以后，开启原主库监听</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsnrctl start</span><br></pre></td></tr></table></figure>

<p>进入sql命令行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看主库状态，如果为TO PRIMARY则正常</span></span><br><span class="line"><span class="keyword">SELECT</span> SWITCHOVER_STATUS <span class="keyword">FROM</span> V$DATABASE;</span><br><span class="line"><span class="comment">-- 开启数据库</span></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">OPEN</span>;</span><br><span class="line"><span class="comment">-- 开启实时同步状态</span></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE RECOVER MANAGED STANDBY DATABASE <span class="keyword">USING</span> <span class="keyword">CURRENT</span> LOGFILE <span class="keyword">DISCONNECT</span> <span class="keyword">FROM</span> SESSION;</span><br></pre></td></tr></table></figure>

<p>等待片刻，查证数据是否开始同步，状态都是YES，则表示已经正常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT SEQUENCE#, REGISTRAR, FIRST_TIME, NEXT_TIME, APPLIED FROM V$ARCHIVED_LOG ORDER BY SEQUENCE#;</span><br></pre></td></tr></table></figure>
<h5 id="4）总结"><a href="#4）总结" class="headerlink" title="4）总结"></a>4）总结</h5><blockquote>
<p>数据库宕机或其他非正常方式停止服务后，如短期内可以恢复，即切换的时间代价大于恢复的时间代价，不建议做切换，具体需要根据实际情况做权衡。</p>
</blockquote>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>主备切换</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL覆盖索引</title>
    <url>/2022/02/10/MySQL%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h4 id="1、概念说明"><a href="#1、概念说明" class="headerlink" title="1、概念说明"></a>1、概念说明</h4><p>​        查询过程中不需要回表操作，从非聚簇索引中即可查询到相关数据，称索引被覆盖，即覆盖索引（参考 <a href="https://blog.jingwee.cn/2021/09/28/MySQL%E7%B4%A2%E5%BC%95%E5%9B%9E%E8%A1%A8/">MySQL索引回表</a>）。</p>
<h4 id="2、概念理解"><a href="#2、概念理解" class="headerlink" title="2、概念理解"></a>2、概念理解</h4><p>​        对于聚簇索引，其叶子节点包含了行数据，如果使用该索引，即可找到对应的行数据；对于非聚簇索引（即非主键索引），如果索引列为普通索引或者唯一索引，在where条件中使用该索引，但此时待查询数据不在索引列中，那么此时的查询过程为先回表，再查询数据，产生一次回表操作；如果使用多列索引（联合索引），如果where条件中使用了最左索引列，待查询数据同时为联合索引中的一个索引列，那么此时则不需要回表，直接取索引数据即可；</p>
<h4 id="3、关于覆盖索引的使用场景"><a href="#3、关于覆盖索引的使用场景" class="headerlink" title="3、关于覆盖索引的使用场景"></a>3、关于覆盖索引的使用场景</h4><p>​        覆盖索引并不是在任意场景都适应，需要看匹配的列数据多少是否合适，太多或者太少，其性能提升都不是很大。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>索引</tag>
      </tags>
  </entry>
</search>
