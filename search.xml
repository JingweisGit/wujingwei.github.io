<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一次因过滤器未正常使用ByteArrayInputStream导致的请求异常</title>
    <url>/2021/08/16/%E4%B8%80%E6%AC%A1%E5%9B%A0%E8%BF%87%E6%BB%A4%E5%99%A8%E6%9C%AA%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8ByteArrayInputStream%E5%AF%BC%E8%87%B4%E7%9A%84%E8%AF%B7%E6%B1%82%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h3 id="一次因过滤器未正常使用ByteArrayInputStream导致的请求异常"><a href="#一次因过滤器未正常使用ByteArrayInputStream导致的请求异常" class="headerlink" title="一次因过滤器未正常使用ByteArrayInputStream导致的请求异常"></a>一次因过滤器未正常使用ByteArrayInputStream导致的请求异常</h3><p>表状为：开发环境一切正常，测试环境中，当只有一个中文字符的时候就会报如下异常：</p>
<p><code>Invalid UTF-8 middle byte 0x3f\n at [Source: (PushbackInputStream); line: 20, column: 11]</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(body.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    ServletInputStream servletInputStream = <span class="keyword">new</span> ServletInputStream() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFinished</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadListener</span><span class="params">(ReadListener readListener)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> byteArrayInputStream.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> servletInputStream;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于框架中使用了上述过滤器，但是为给定UTF-8字符集，导致开发环境不报错，测试环境报了上述错误。</p>
<ul>
<li>上述问题导致的另一个问题<blockquote>
<p>中文返回乱码</p>
</blockquote>
</li>
</ul>
<p>解决方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.http.encoding.force=true</span><br><span class="line">spring.http.encoding.charset=UTF-8</span><br><span class="line">spring.http.encoding.enabled=true</span><br><span class="line">server.tomcat.uri-encoding=UTF-8</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web应用</category>
      </categories>
      <tags>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>中断异常的正确处理方式</title>
    <url>/2021/08/16/%E4%B8%AD%E6%96%AD%E5%BC%82%E5%B8%B8%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="InterruptedException"><a href="#InterruptedException" class="headerlink" title="InterruptedException"></a>InterruptedException</h2><blockquote>
<p>线程状态</p>
</blockquote>
<ul>
<li><p>新建 -&gt; 就绪 -&gt; 运行 -&gt; 阻塞 -&gt; 死亡</p>
<p><img src="https://jingwei-blog.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.jpg" alt="线程中断"></p>
<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4></li>
<li><p>1、线程中断介绍</p>
<p>​    Java中的中断实际上并不是真正的中断了一个线程，而是维护了一个中断的标识。</p>
<p>​    每一个线程都有一个boolean类型的标志，此标志意思是当前的请求是否请求中断，默认为false。当一个线程A调用了线程B的interrupt方法时，那么线程B的是否请求的中断标志变为true。而线程B可以调用方法检测到此标志的变化。</p>
<p>2、中断异常介绍</p>
<p>​    中断异常只是为了标识某个行为被中断，实际上并不中断当前线程。</p>
<ul>
<li>源码中关于中断的解释（翻译不一定完全到位，理解即可）</li>
</ul>
<p>Thrown when a thread is waiting, sleeping, or otherwise occupied, and the thread is interrupted, either before or during the activity. Occasionally a method may wish to test whether the current thread has been interrupted, and if so, to immediately throw this exception.</p>
<p>当线程正在等待、休眠或以其他方式被占用时抛出，线程在活动状态之前或者活动期间被中断。有时候，一个方法也许希望检测当前线程是否被中断，因此，要立即抛出此异常。</p>
</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul>
<li>不正确示例<blockquote>
<p>示例</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   res = lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException ex)&#123;</span><br><span class="line">   log.error(ex.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述方式只是记录了日志，没有对中断进行处理，对于上一级调用程序，当前线程的中断状态无法被感知。</p>
<h4 id="正确的处理方式"><a href="#正确的处理方式" class="headerlink" title="正确的处理方式"></a>正确的处理方式</h4><ul>
<li>重新抛出异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">   res = lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException ex)&#123;</span><br><span class="line">   log.error(ex.getMessage());</span><br><span class="line">   <span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过线程<code> Thread.currentThread().interrupt();</code>方法将状态重新置为true</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 维护一个可用标识，通过标识来判断是否重置中断状态</span></span><br><span class="line"><span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    res = lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;<span class="keyword">catch</span> (InterruptedException ex)&#123;</span><br><span class="line">    log.error(ex.getMessage());</span><br><span class="line">    interrupted = <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(interrupted) &#123;</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA基础</category>
      </categories>
      <tags>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>基于dockers安装sentry</title>
    <url>/2021/08/16/%E5%AE%B9%E5%99%A8-%E5%9F%BA%E4%BA%8Edockers%E5%AE%89%E8%A3%85sentry/</url>
    <content><![CDATA[<h2 id="docker下安装sentry"><a href="#docker下安装sentry" class="headerlink" title="docker下安装sentry"></a>docker下安装sentry</h2><h3 id="1-拉取-sentry镜像"><a href="#1-拉取-sentry镜像" class="headerlink" title="1. 拉取 sentry镜像"></a>1. 拉取 sentry镜像</h3><p>  <code>docker pull sentry</code></p>
<p>  <code>docker pull postgres</code></p>
<p>  <code>docker pull redis</code></p>
<h3 id="2-运行容器"><a href="#2-运行容器" class="headerlink" title="2. 运行容器"></a>2. 运行容器</h3><h4 id="2-1-生成secret-key"><a href="#2-1-生成secret-key" class="headerlink" title="2.1. 生成secret-key"></a>2.1. 生成secret-key</h4><p>  <code>docker run --rm sentry config generate-secret-key</code></p>
<blockquote>
<p>将生成的secret-key保留，用在下一步中</p>
</blockquote>
<h4 id="2-2-运行容器"><a href="#2-2-运行容器" class="headerlink" title="2.2. 运行容器"></a>2.2. 运行容器</h4><p><code>docker run -d --name sentry-redis redis</code></p>
<p><code>docker run -d --name sentry-postgres -e POSTGRES_PASSWORD=admin -e POSTGRES_USER=admin postgres</code></p>
<p><code>docker run -it --rm -e SENTRY_SECRET_KEY=&quot;k&amp;61n_&amp;w++53+f18sgt!u!j+b-l^6m02oo#qq%k--+128o+1cr&quot; --link sentry-postgres:postgres --link sentry-redis:redis sentry upgrade</code></p>
<blockquote>
<p>note: -p proxy_port:origin_port 需要将原始端口映射到外部，否则访问不到</p>
</blockquote>
<p><code>docker run -d -p 9000:9000 --name my-sentry -e SENTRY_SECRET_KEY=&quot;k&amp;61n_&amp;w++53+f18sgt!u!j+b-l^6m02oo#qq%k--+128o+1cr&quot; --link sentry-redis:redis --link sentry-postgres:postgres sentry</code></p>
<p><code>docker run -d --name sentry-cron -e SENTRY_SECRET_KEY=&quot;k&amp;61n_&amp;w++53+f18sgt!u!j+b-l^6m02oo#qq%k--+128o+1cr&quot; --link sentry-postgres:postgres --link sentry-redis:redis sentry run cron</code></p>
<p><code>docker run -d --name sentry-worker-1 -e SENTRY_SECRET_KEY=&quot;k&amp;61n_&amp;w++53+f18sgt!u!j+b-l^6m02oo#qq%k--+128o+1cr&quot; --link sentry-postgres:postgres --link sentry-redis:redis sentry run worker</code></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>容器技术</tag>
      </tags>
  </entry>
  <entry>
    <title>基于docker发布Springboot项目</title>
    <url>/2021/08/13/%E5%AE%B9%E5%99%A8-%E5%9F%BA%E4%BA%8Edocker%E5%8F%91%E5%B8%83Springboot%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h4 id="基于docker发布springboot项目到远程服务器"><a href="#基于docker发布springboot项目到远程服务器" class="headerlink" title="基于docker发布springboot项目到远程服务器"></a>基于docker发布springboot项目到远程服务器</h4><blockquote>
<p>环境说明</p>
<p>服务器：CenOS 7</p>
<p>IDE：idea</p>
</blockquote>
<blockquote>
<p><strong>PART 1 服务器环境配置</strong></p>
</blockquote>
<ul>
<li><h4 id="1-docker镜像配置"><a href="#1-docker镜像配置" class="headerlink" title="1.  docker镜像配置"></a>1.  docker镜像配置</h4></li>
</ul>
<p>​        <strong>1.1. docker镜像源配置</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># docker镜像源配置</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://f1361db2.m.daocloud.io&quot;</span></span><br><span class="line">        ],</span><br><span class="line">    <span class="attr">&quot;live-restore&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        <strong>1.2. docker服务修改，使外网可访问</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将一下行注掉，修改为如下所示</span><br><span class="line">#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line">ExecStart=/usr/bin/dockerd  -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>PART 2 项目操作环境配置</strong></p>
</blockquote>
<ul>
<li><h5 id="1-pom中加入docker构建插件"><a href="#1-pom中加入docker构建插件" class="headerlink" title="1.  pom中加入docker构建插件"></a>1.  pom中加入docker构建插件</h5><p><strong>1.1.</strong> <strong>声明镜像名称前缀</strong></p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>镜像名称<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​            <strong>1.2</strong>. <strong>build-&gt;plugins中加入docker构建plugin</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--docker镜像构建工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>src/main/target<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ul>
<li><strong>2. Dockerfile配置</strong></li>
</ul>
<p>步骤一：与src同级目录下，新建Dockerfile<br><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-dockerfile.jpg" alt="dockerfile"></p>
<p>步骤二：Dockerfile配置</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> target/项目名称.jar /项目名称.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/项目名称.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>3. idea添加docker配置</strong><br>步骤一：添加template</li>
</ul>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-idea-docker-tmp.jpg" alt="idea-docker-template"></p>
<p>步骤二：添加docker配置</p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-docker-add.jpg" alt="0611-docker-add"></p>
<p><em><u>配置介绍</u></em></p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-docker-add-conf.jpg" alt="0611-docker-add-conf"></p>
<p> 步骤三：在service栏中添加docker**<Docker Connection>**服务，配置docker环境远程连接</p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-docker-remote-conn.jpg" alt="0611-docker-remote-conn"></p>
<p style="color:red;">注：要连接远程环境，需要远程docker支持，详见part1中介绍</p>

<p>至此，IDE中环境配置结束</p>
<blockquote>
<p><strong>PART 3 开始构建</strong></p>
</blockquote>
<ul>
<li><p><strong>1. 按照maven常规方式打包项目</strong></p>
</li>
<li><p><strong>2. 点击idea按钮开始构建</strong></p>
</li>
</ul>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-start-build-btn.jpg" alt="0611-start-build-btn"></p>
<p><em><u>构建结果</u></em></p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-docker-build-res.jpg" alt="0611-docker-build-res"></p>
<ul>
<li><strong>3. 启动容器</strong></li>
</ul>
<p><strong>3.1. 创建容器</strong></p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-docker-create-cont.jpg" alt="0611-docker-create-cont"></p>
<ul>
<li><p><strong>3.2. 容器端口配置</strong></p>
<p><img src="https://wx-doc.oss-cn-beijing.aliyuncs.com/0611-docker-port-conf.jpg" alt="0611-docker-port-conf"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>容器技术</tag>
      </tags>
  </entry>
  <entry>
    <title>本站说明</title>
    <url>/2021/08/13/%E7%AB%99%E7%82%B9%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<p><strong>用于记录开发过程中遇到的一些技术问题，同时提供一些技术样例</strong></p>
]]></content>
      <categories>
        <category>本站说明</category>
      </categories>
  </entry>
</search>
